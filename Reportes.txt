report 50100 Bultos
{
    DefaultLayout = RDLC;
    RDLCLayout = './Bultos.rdl';
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;
    Caption = 'Paquetes';

    dataset
    {
        dataitem(HistGestionEmbarqueHeader; HistGestionEmbarqueHeader)
        {
            column(No_; "No.")
            {
            }
            column(NoBulto; NoBulto)
            {
            }
            column(Bill_to_Customer_No_; "Bill-to Customer No.")
            {
            }
            column(Bill_to_Name; "Bill-to Name")
            {
            }
            column(CompanyInfoPic; CompanyInfo.Picture)
            {
            }
            column(N__Pizarra; "N° Pizarra")
            {
            }
            column(PostingDate; PostingDate)
            {
            }
            column(NombreVendedor; NombreVendedor)
            {
            }

            dataitem(HistGestionEmbarqueLine; HistGestionEmbarqueLine)
            {
                DataItemLink = "No." = field("No.");
                DataItemTableView = SORTING("No.", "Line No");

                column(Item_No; "Item No")
                {
                }
                column(Description; Description)
                {
                }
                column(Quantity; Quantity)
                {
                }
                column(Bulto; Bulto)
                {
                }

                dataitem(itemPic; item)
                {
                    DataItemLinkReference = HistGestionEmbarqueLine;
                    DataItemLink = "No." = field("Item No");

                    column(itemPicture; picture)
                    {
                    }
                }

            }
            trigger OnAfterGetRecord()
            var
                HistFactura: Record "Sales Invoice Header";
                VendedorComprador: Record "Salesperson/Purchaser";
            begin
                HistFactura.SetRange("No.", "No.");
                if HistFactura.FindFirst() then begin
                    VendedorComprador.SetRange(Code, HistFactura."Salesperson Code");
                    if VendedorComprador.FindFirst() then begin
                        NombreVendedor := VendedorComprador.Name;
                    end;
                    PostingDate := HistFactura."Posting Date";
                end;
            end;
        }
    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }
    }
    trigger OnPreReport()
    var
    //myInt: Integer;
    begin
        CompanyInfo.Get();
        CompanyInfo.CalcFields(Picture);
    end;

    var
        CompanyInfo: Record "Company Information";
        //Pertenece: Integer;
        NombreVendedor: Text[50];
        PostingDate: Date;

}
report 50101 ConocimientoEmbarque
{
    DefaultLayout = RDLC;
    RDLCLayout = './ConocimientoEmbarque.rdl';
    UsageCategory = ReportsAndAnalysis;

    ApplicationArea = All;

    dataset
    {
        dataitem(GestionEmbarqueHeader; GestionEmbarqueHeader)
        {
            column(Estado; Estado)
            {

            }
            column(No_; "No.")
            {

            }
            column(Bill_to_Customer_No_; "Bill-to Customer No.")
            { }
            column(Bill_to_Name; "Bill-to Name")
            {

            }
            column(Shipment_Date; "Shipment Date")
            {

            }
            column(Location_Code; "Location Code")
            {

            }
            column(Fecha_inicio_embarque; "Fecha inicio embarque")
            {

            }
            column(CompaInformation; CompaInformation.Picture)
            {

            }
            dataitem(Customer; Customer)
            {
                DataItemLink = "No." = field("Bill-to Customer No.");
                DataItemTableView = SORTING("No.");
                column(Phone_No_; "Phone No.")
                {

                }
                column(Contact; Contact)
                {

                }
                column(Address; Address)
                {

                }
                column(Address_2; "Address 2")
                {

                }
                column(City; City)
                {

                }
                column(Post_Code; "Post Code")
                {

                }

            }
            dataitem(GestionEmbarqueLine; GestionEmbarqueLine)
            {
                DataItemLink = "No." = field("No.");
                DataItemTableView = SORTING("No.", "Line No");

                column(Bulto; Bulto)
                {

                }
                column(Quantity; Quantity)
                {

                }
                column(Item_No; "Item No")
                {

                }
                column(Description; Description)
                {
                }

            }

        }

    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }

        actions
        {
            area(processing)
            {
                action(ActionName)
                {
                    ApplicationArea = All;

                }
            }
        }
    }
    trigger OnPreReport()
    var
        myInt: Integer;
    begin
        CompaInformation.Get();
        CompaInformation.CalcFields(Picture);
    end;

    var
        CompaInformation: Record "Company Information";

}
report 50102 ConocimientoEmbarquehist
{
    DefaultLayout = RDLC;
    RDLCLayout = './ConocimientoEmbarquehist.rdl';
    UsageCategory = ReportsAndAnalysis;

    ApplicationArea = All;

    dataset
    {
        dataitem(HistGestionEmbarqueHeader; HistGestionEmbarqueHeader)
        {
            column(Estado; Estado)
            {

            }
            column(No_; "No.")
            {

            }
            column(Bill_to_Customer_No_; "Bill-to Customer No.")
            { }
            column(Bill_to_Name; "Bill-to Name")
            {

            }
            column(Shipment_Date; "Shipment Date")
            {

            }
            column(Location_Code; "Location Code")
            {

            }
            column(Fecha_inicio_embarque; "Fecha inicio embarque")
            {

            }
            column(CompaInformation; CompaInformation.Picture)
            {

            }
            column(Order_No_; "Order No.")
            {

            }
            column(FechaEntrega; FechaEntrega)
            {

            }
            column(Observaciones; Observaciones)
            {

            }
            column(Vendor; Vendor)
            {

            }
            column("No_Identificación"; "N° Identificación")
            {

            }
            dataitem(Vendor; Vendor)
            {
                DataItemLink = "No." = field(Vendor);
                DataItemTableView = sorting("No.");
                DataItemLinkReference = HistGestionEmbarqueHeader;
                column(Name; Name)
                {

                }
                column(ContactVe; Contact)
                {

                }
                column(Phone_NoVendor; "Phone No.")
                {

                }
                column(AddressVendor; Address)
                {

                }
                dataitem(Customer; Customer)
                {

                    DataItemLinkReference = HistGestionEmbarqueHeader;
                    DataItemLink = "No." = field("Bill-to Customer No.");
                    DataItemTableView = SORTING("No.");


                    column(Phone_No_; "Phone No.")
                    {

                    }
                    column(Contact; Contact)
                    {

                    }
                    column(Address; Address)
                    {

                    }
                    column(Address_2; "Address 2")
                    {

                    }
                    column(City; City)
                    {

                    }
                    column(Post_Code; "Post Code")
                    {

                    }

                }
            }




            dataitem(HistGestionEmbarqueLine; HistGestionEmbarqueLine)
            {
                DataItemLink = "No." = field("No.");
                DataItemTableView = SORTING("No.", "Line No");

                column(Bulto; Bulto)
                {

                }
                column(Quantity; Quantity)
                {

                }
                column(Item_No; "Item No")
                {

                }
                column(Description; Description)
                {
                }

            }

        }


    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }

        actions
        {
            area(processing)
            {
                action(ActionName)
                {
                    ApplicationArea = All;

                }
            }
        }
    }
    trigger OnPreReport()
    var
        myInt: Integer;
    begin
        CompaInformation.Get();
        CompaInformation.CalcFields(Picture);
    end;

    var
        CompaInformation: Record "Company Information";

}
report 50103 "Gestion Bultos"
{
    DefaultLayout = RDLC;
    RDLCLayout = './GestionBultos.rdl';
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;
    Caption = 'Gestion de Paquetes';

    dataset
    {
        dataitem(GestionEmbarqueHeader; GestionEmbarqueHeader)
        {
            column(No_; "No.")
            {
            }
            column(NoBulto; NoBulto)
            {
            }
            column(Bill_to_Customer_No_; "Bill-to Customer No.")
            {
            }
            column(Bill_to_Name; "Bill-to Name")
            {
            }
            column(CompanyInfoPic; CompanyInfo.Picture)
            {
            }
            column(N__Pizarra; "N° Pizarra")
            {

            }
            column(PostingDate; PostingDate)
            {

            }
            column(NombreVendedor; NombreVendedor)
            {

            }
            dataitem(GestionEmbarqueLine; GestionEmbarqueLine)
            {
                DataItemLink = "No." = field("No.");
                DataItemTableView = SORTING("No.", "Line No");

                column(Item_No; "Item No")
                {
                }
                column(Description; Description)
                {
                }
                column(Quantity; Quantity)
                {
                }
                column(Bulto; Bulto)
                {
                }

                dataitem(itemPic; item)
                {
                    DataItemLinkReference = GestionEmbarqueLine;
                    DataItemLink = "No." = field("Item No");

                    column(itemPicture; picture)
                    {
                    }
                }
            }
            trigger OnAfterGetRecord()
            var
                HistFactura: Record "Sales Invoice Header";
                VendedorComprador: Record "Salesperson/Purchaser";
            begin
                HistFactura.SetRange("No.", "No.");
                if HistFactura.FindFirst() then begin
                    VendedorComprador.SetRange(Code, HistFactura."Salesperson Code");
                    if VendedorComprador.FindFirst() then begin
                        NombreVendedor := VendedorComprador.Name;
                    end;
                    PostingDate := HistFactura."Posting Date";
                end;
            end;
        }
    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }
    }
    trigger OnPreReport()
    var
    //myInt: Integer;
    begin
        CompanyInfo.Get();
        CompanyInfo.CalcFields(Picture);
    end;

    var
        CompanyInfo: Record "Company Information";
        //Pertenece: Integer;
        NombreVendedor: Text[50];
        PostingDate: Date;

}
report 50104 "ElecSalesInvoiceMXNAMUH"
{
    // version NAVNA13.01

    DefaultLayout = RDLC;
    RDLCLayout = './FacturaElecNamuh.rdl';
    Caption = 'Factura Electrónica Namuh México';
    Permissions = TableData "Sales Invoice Line" = rimd;

    dataset
    {
        dataitem("Sales Invoice Header"; "Sales Invoice Header")
        {
            DataItemTableView = SORTING("No.");
            PrintOnlyIfDetail = true;
            RequestFilterFields = "No.", "Sell-to Customer No.", "Bill-to Customer No.", "Ship-to Code", "No. Printed";
            RequestFilterHeading = 'Sales Invoice';

            column(Sales_Invoice_Header_No_; "No.")
            {
            }
            column(DocumentFooter; DocumentFooterLbl)
            {
            }
            column(Fiscal_Invoice_Number_PAC; "Fiscal Invoice Number PAC")
            {
            }
            column(Date_Time_Stamped; "Date/Time Stamped")
            {
            }
            column(Posting_Date; "Posting Date")
            {
            }
            column(NombreVendedor; NombreVendedor)
            { }
            column(Tcambio; Tcambio)
            { }
            column(Divisa; Divisa)
            { }
            column(UsoCDFI; UsoCFDI)
            {
            }
            column(CFDI_Purpose; "CFDI Purpose") { }
            column(NoFolio; NoFolio) { }
            column(Serie; Serie) { }
            column(PBANumeroFacturaFiscal; PBANumeroFacturaFiscal) { }
            column(PBAPicture; PBACompanyInfo.Picture) { }

            column(Order_No_; "Order No.") { }
            dataitem("Sales Invoice Line"; "Sales Invoice Line")
            {
                DataItemLink = "Document No." = FIELD("No.");
                DataItemTableView = SORTING("Document No.", "Line No.");
                dataitem(SalesLineComments; "Sales Comment Line")
                {

                    DataItemLink = "No." = FIELD("Document No."), "Document Line No." = FIELD("Line No.");
                    DataItemTableView = SORTING("Document Type", "No.", "Document Line No.", "Line No.") WHERE("Document Type" = CONST("Posted Invoice"), "Print On Invoice" = CONST(true));

                    trigger OnAfterGetRecord()
                    var
                        PBATable: Record "CFDI Relation Document";
                        PBANumeroFacturaFiscal: Text;
                    begin
                        with TempSalesInvoiceLine do begin
                            Init;
                            "Document No." := "Sales Invoice Header"."No.";
                            "Line No." := HighestLineNo + 10;
                            HighestLineNo := "Line No.";
                        end;
                        if StrLen(Comment) <= MaxStrLen(TempSalesInvoiceLine.Description) then begin
                            TempSalesInvoiceLine.Description := Comment;
                            TempSalesInvoiceLine."Description 2" := '';
                        end else begin
                            SpacePointer := MaxStrLen(TempSalesInvoiceLine.Description) + 1;
                            while (SpacePointer > 1) and (Comment[SpacePointer] <> ' ') do
                                SpacePointer := SpacePointer - 1;
                            if SpacePointer = 1 then
                                SpacePointer := MaxStrLen(TempSalesInvoiceLine.Description) + 1;
                            TempSalesInvoiceLine.Description := CopyStr(Comment, 1, SpacePointer - 1);
                            TempSalesInvoiceLine."Description 2" :=
                              CopyStr(CopyStr(Comment, SpacePointer + 1), 1, MaxStrLen(TempSalesInvoiceLine."Description 2"));
                        end;
                        TempSalesInvoiceLine.Insert;
                    end;
                }

                trigger OnAfterGetRecord()
                var




                begin
                    /////////////////////////////////aqui toma todas la lineas  de  la  factura...  
                    TempSalesInvoiceLine := "Sales Invoice Line";
                    TempSalesInvoiceLine.Insert;
                    HighestLineNo := "Line No.";
                    TempSalesInvoiceLineAsm := "Sales Invoice Line";
                    TempSalesInvoiceLineAsm.Insert;

                    impuesto := ((TempSalesInvoiceLineAsm.Quantity * TempSalesInvoiceLineAsm."Unit Price") * 0.16);/////+++

                    ///////////++++++++++++++
                    SATUseCode.SetRange("SAT Use Code", Customer."CFDI Purpose");
                    if SATUseCode.FindFirst() then begin
                        UsoCFDI := (SATUseCode."SAT Use Code");// + ' - ' + SATUseCode.Description);
                        ////++++++++
                    end;

                end;

                trigger OnPreDataItem()
                begin
                    TempSalesInvoiceLine.Reset;
                    TempSalesInvoiceLine.DeleteAll;
                    TempSalesInvoiceLineAsm.Reset;
                    TempSalesInvoiceLineAsm.DeleteAll;
                end;
            }

            dataitem("Sales Comment Line"; "Sales Comment Line")
            {
                DataItemLink = "No." = FIELD("No.");
                DataItemTableView = SORTING("Document Type", "No.", "Document Line No.", "Line No.") WHERE("Document Type" = CONST("Posted Invoice"), "Print On Invoice" = CONST(true), "Document Line No." = CONST(0));

                trigger OnAfterGetRecord()
                begin
                    with TempSalesInvoiceLine do begin
                        Init;
                        "Document No." := "Sales Invoice Header"."No.";
                        "Line No." := HighestLineNo + 1000;
                        HighestLineNo := "Line No.";
                    end;
                    if StrLen(Comment) <= MaxStrLen(TempSalesInvoiceLine.Description) then begin
                        TempSalesInvoiceLine.Description := Comment;
                        TempSalesInvoiceLine."Description 2" := '';
                    end else begin
                        SpacePointer := MaxStrLen(TempSalesInvoiceLine.Description) + 1;
                        while (SpacePointer > 1) and (Comment[SpacePointer] <> ' ') do
                            SpacePointer := SpacePointer - 1;
                        if SpacePointer = 1 then
                            SpacePointer := MaxStrLen(TempSalesInvoiceLine.Description) + 1;
                        TempSalesInvoiceLine.Description := CopyStr(Comment, 1, SpacePointer - 1);
                        TempSalesInvoiceLine."Description 2" :=
                          CopyStr(CopyStr(Comment, SpacePointer + 1), 1, MaxStrLen(TempSalesInvoiceLine."Description 2"));
                    end;
                    TempSalesInvoiceLine.Insert;
                end;

                trigger OnPreDataItem()
                begin
                    with TempSalesInvoiceLine do begin
                        Init;
                        "Document No." := "Sales Invoice Header"."No.";
                        "Line No." := HighestLineNo + 1000;
                        HighestLineNo := "Line No.";
                    end;
                    TempSalesInvoiceLine.Insert;
                end;
            }
            dataitem(CopyLoop; "Integer")
            {
                DataItemTableView = SORTING(Number);
                dataitem(PageLoop; "Integer")
                {
                    DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));
                    column(CompanyInfo2_Picture; CompanyInfo2.Picture)
                    {
                    }
                    column(CompanyInfo1_Picture; CompanyInfo1.Picture)
                    {
                    }
                    column(TotalDescuentos; TotalDescuentos)
                    { }//++++++++++++++

                    column(CompanyInformation_Picture; CompanyInformation.Picture)
                    {
                    }
                    column(CompanyInformation_CP; CompanyInformation."Post Code")
                    {
                    }
                    column(TempSalesInvoiceLineDiscountAmount; TempSalesInvoiceLine."Line Discount Amount")
                    { }
                    column(locationCode; TempSalesInvoiceLine."Location Code")
                    {

                    }
                    column(CompanyInformationCtiy; CompanyInformation.City)
                    { }
                    column(CompanyInformationCounty; CompanyInformation.County)
                    { }
                    column(CompanyInformationCountryRegioncode; CompanyInformation."Country/Region Code")
                    { }
                    column(CompanyAddress_1_; CompanyAddress[1])
                    {
                    }
                    column(CompanyAddress_2_; CompanyAddress[2])
                    {
                    }
                    column(CompanyAddress_3_; CompanyAddress[3])
                    {
                    }
                    column(CompanyAddress_4_; CompanyAddress[4])
                    {
                    }
                    column(CompanyAddress_5_; CompanyAddress[5])
                    {
                    }
                    column(CompanyAddress_6_; CompanyAddress[6])
                    {
                    }
                    column(CopyTxt; CopyTxt)
                    {
                    }
                    column(BillToAddress_1_; BillToAddress[1])
                    {
                    }
                    column(BillToAddress_2_; BillToAddress[2])
                    {
                    }
                    column(BillToAddress_3_; BillToAddress[3])
                    {
                    }
                    column(BillToAddress_4_; BillToAddress[4])
                    {
                    }
                    column(BillToAddress_5_; BillToAddress[5])
                    {
                    }
                    column(BillToAddress_6_; BillToAddress[6])
                    {
                    }
                    column(BillToAddress_7_; BillToAddress[7])
                    {
                    }
                    column(ShipmentMethod_Description; ShipmentMethod.Description)
                    {
                    }
                    column(Sales_Invoice_Header___Shipment_Date_; "Sales Invoice Header"."Shipment Date")
                    {
                    }
                    column(Sales_Invoice_Header___Due_Date_; "Sales Invoice Header"."Due Date")
                    {
                    }
                    column(PaymentTerms_Description; PaymentTerms.Description)
                    {
                    }
                    column(ShipToAddress_1_; ShipToAddress[1])
                    {
                    }
                    column(ShipToAddress_2_; ShipToAddress[2])
                    {
                    }
                    column(ShipToAddress_3_; ShipToAddress[3])
                    {
                    }
                    column(ShipToAddress_4_; ShipToAddress[4])
                    {
                    }
                    column(ShipToAddress_5_; ShipToAddress[5])
                    {
                    }
                    column(ShipToAddress_6_; ShipToAddress[6])
                    {
                    }
                    column(ShipToAddress_7_; ShipToAddress[7])
                    {
                    }
                    column(Sales_Invoice_Header___Bill_to_Customer_No__; "Sales Invoice Header"."Bill-to Customer No.")
                    {
                    }
                    column(Sales_Invoice_Header___Your_Reference_; "Sales Invoice Header"."Your Reference")
                    {
                    }
                    column(Sales_Invoice_Header___Order_Date_; "Sales Invoice Header"."Order Date")
                    {
                    }
                    column(Sales_Invoice_Header___Order_No__; "Sales Invoice Header"."Order No.")
                    {
                    }
                    column(SalesPurchPerson_Name; SalesPurchPerson.Name)
                    {
                    }
                    /*column(CurrReport_PAGENO;CurrReport.PageNo)
                    {
                    }*/
                    column(CompanyAddress_7_; CompanyAddress[7])
                    {
                    }
                    column(CompanyAddress_8_; CompanyAddress[8])
                    {
                    }
                    column(BillToAddress_8_; BillToAddress[8])
                    {
                    }
                    column(ShipToAddress_8_; ShipToAddress[8])
                    {
                    }
                    column(CopyNo; CopyNo)
                    {
                    }
                    column(DocumentText; DocumentText)
                    {
                    }
                    column(CompanyInformation__RFC_No__; CompanyInformation."RFC No.")
                    {
                    }
                    column(FolioText; "Sales Invoice Header"."Fiscal Invoice Number PAC")
                    {
                    }
                    column(Sales_Invoice_Header___Certificate_Serial_No__; "Sales Invoice Header"."Certificate Serial No.")
                    {
                    }
                    column(NoSeriesLine__Authorization_Code_; "Sales Invoice Header"."Date/Time Stamped")
                    {
                    }
                    column(NoSeriesLine__Authorization_Year_; StrSubstNo(Text013, "Sales Invoice Header"."Bill-to City", "Sales Invoice Header"."Document Date"))
                    {
                    }
                    column(Customer__RFC_No__; Customer."RFC No.")
                    {
                    }
                    column(Sales_Invoice_Header___No__; "Sales Invoice Header"."No.")
                    {
                    }
                    column(Customer__Phone_No__; Customer."Phone No.")
                    {
                    }
                    column(CustomerCP; Customer."Post Code")
                    { }
                    column(PageLoop_Number; Number)
                    {
                    }
                    column(BillCaption; BillCaptionLbl)
                    {
                    }
                    column(Ship_ViaCaption; Ship_ViaCaptionLbl)
                    {
                    }
                    column(Ship_DateCaption; Ship_DateCaptionLbl)
                    {
                    }
                    column(Due_DateCaption; Due_DateCaptionLbl)
                    {
                    }
                    column(TermsCaption; TermsCaptionLbl)
                    {
                    }
                    column(Customer_IDCaption; Customer_IDCaptionLbl)
                    {
                    }
                    column(P_O__NumberCaption; P_O__NumberCaptionLbl)
                    {
                    }
                    column(P_O__DateCaption; P_O__DateCaptionLbl)
                    {
                    }
                    column(Our_Order_No_Caption; Our_Order_No_CaptionLbl)
                    {
                    }
                    column(SalesPersonCaption; SalesPersonCaptionLbl)
                    {
                    }
                    column(ShipCaption; ShipCaptionLbl)
                    {
                    }
                    column(Page_Caption; Page_CaptionLbl)
                    {
                    }
                    column(CompanyInformation__RFC_No__Caption; CompanyInformation__RFC_No__CaptionLbl)
                    {
                    }
                    column(FolioTextCaption; FolioTextCaptionLbl)
                    {
                    }
                    column(Sales_Invoice_Header___Certificate_Serial_No__Caption; Sales_Invoice_Header___Certificate_Serial_No__CaptionLbl)
                    {
                    }
                    column(NoSeriesLine__Authorization_Code_Caption; NoSeriesLine__Authorization_Code_CaptionLbl)
                    {
                    }
                    column(NoSeriesLine__Authorization_Year_Caption; NoSeriesLine__Authorization_Year_CaptionLbl)
                    {
                    }
                    column(Customer__RFC_No__Caption; Customer__RFC_No__CaptionLbl)
                    {
                    }
                    column(Customer__Phone_No__Caption; Customer__Phone_No__CaptionLbl)
                    {
                    }
                    column(SATPaymentMethod; SATPaymentMethod)
                    {
                    }
                    column(SATPaymentTerm; SATPaymentTerm)
                    {
                    }
                    column(SATTaxRegimeClassification; SATTaxRegimeClassification)
                    {
                    }
                    column(SATTipoRelacion; SATTipoRelacion)
                    {
                    }
                    column(SATFolioFiscal; SATFolioFiscal)
                    {
                    }
                    column(TaxRegimeCaption; TaxRegimeLbl)
                    {
                    }
                    dataitem(SalesInvLine; "Integer")
                    {
                        DataItemTableView = SORTING(Number);
                        /*column(STRSUBSTNO_Text001_CurrReport_PAGENO___1_;StrSubstNo(Text001,CurrReport.PageNo - 1))
                        {
                        }*/
                        column(AmountExclInvDisc; AmountExclInvDisc)
                        {
                        }
                        column(TempSalesInvoiceLine__No__; TempSalesInvoiceLine."No.")
                        {
                        }
                        column(TempSalesInvoiceLine__Unit_of_Measure_; TempSalesInvoiceLine."Unit of Measure")
                        {
                        }
                        column(OrderedQuantity; OrderedQuantity)
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(TempSalesInvoiceLine_Quantity; TempSalesInvoiceLine.Quantity)
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(impuesto; impuesto)
                        { }
                        column(impuesto2; (TempSalesInvoiceLine."Amount Including VAT" - TempSalesInvoiceLine.Amount))
                        { }

                        column(SubtotalIncluyendoIva; TempSalesInvoiceLine."Amount Including VAT" + TotalDescuentos) { }
                        column(Pedimento; Pedimento)
                        {
                        }

                        column(Ajente_Aduanal; AjenteAduanal)
                        {
                        }
                        column(Fecha_Pedimento; FechaPedimento)
                        {
                        }
                        column(UnidadSAT; UnidadSAT) { }
                        column(ClaveSAT; ClaveSAT) { }
                        column(medidas; medidas) { }

                        column(UnitPriceToPrint; UnitPriceToPrint)
                        {
                            DecimalPlaces = 2 : 5;
                        }
                        column(AmountExclInvDisc_Control53; AmountExclInvDisc)
                        {
                        }
                        column(LowDescription; LowDescriptionToPrint)
                        {
                        }
                        column(HighDescription; HighDescriptionToPrint)
                        {
                        }
                        column(SalesInvLine_Number; Number)
                        {
                        }
                        /*column(STRSUBSTNO_Text002_CurrReport_PAGENO___1_;StrSubstNo(Text002,CurrReport.PageNo + 1))
                        {
                        }*/
                        column(AmountExclInvDisc_Control40; AmountExclInvDisc)
                        {
                        }
                        column(AmountExclInvDisc_Control79; AmountExclInvDisc)
                        {
                        }
                        column(TempSalesInvoiceLine_Amount___AmountExclInvDisc; TempSalesInvoiceLine.Amount - AmountExclInvDisc)
                        {
                        }
                        column(ReferenciaCruzada; TempSalesInvoiceLine."Cross-Reference No.") { }
                        column(TempSalesInvoiceLine__Amount_Including_VAT____TempSalesInvoiceLine_Amount; TempSalesInvoiceLine."Amount Including VAT" - TempSalesInvoiceLine.Amount)
                        {
                        }
                        column(TempSalesInvoiceLine__Amount_Including_VAT_; TempSalesInvoiceLine."Amount Including VAT")
                        {
                        }
                        column(DescripcionProducto; TempSalesInvoiceLine.Description)
                        {
                        }
                        column(AmountInWords_1_; AmountInWords[1])
                        {
                        }
                        column(AmountInWords_2_; AmountInWords[2])
                        {
                        }

                        column(Item_DescriptionCaption; Item_DescriptionCaptionLbl)
                        {
                        }
                        column(UnitCaption; UnitCaptionLbl)
                        {
                        }
                        column(Order_QtyCaption; Order_QtyCaptionLbl)
                        {
                        }
                        column(QuantityCaption; QuantityCaptionLbl)
                        {
                        }
                        column(Unit_PriceCaption; Unit_PriceCaptionLbl)
                        {
                        }
                        column(Total_PriceCaption; Total_PriceCaptionLbl)
                        {
                        }
                        column(Subtotal_Caption; Subtotal_CaptionLbl)
                        {
                        }
                        column(Invoice_Discount_Caption; Invoice_Discount_CaptionLbl)
                        {
                        }
                        column(Total_Caption; Total_CaptionLbl)
                        {
                        }
                        column(Amount_in_words_Caption; Amount_in_words_CaptionLbl)
                        {
                        }
                        column(NvoCodigo; NvoCodigo) { }
                        column(NvaDescripcion; NvaDescripcion) { }
                        column(TempSalesInvoiceLine__Amount_Including_VAT____TempSalesInvoiceLine_AmountCaption; TempSalesInvoiceLine__Amount_Including_VAT____TempSalesInvoiceLine_AmountCaptionLbl)
                        {
                        }

                        dataitem(AsmLoop; "Integer")
                        {
                            DataItemTableView = SORTING(Number);
                            column(TempPostedAsmLineUnitofMeasureCode; GetUOMText(TempPostedAsmLine."Unit of Measure Code"))
                            {
                                //DecimalPlaces = 0:5;
                            }
                            column(TempPostedAsmLineQuantity; TempPostedAsmLine.Quantity)
                            {
                                DecimalPlaces = 0 : 5;
                            }
                            column(TempPostedAsmLineVariantCode; BlanksForIndent + TempPostedAsmLine."Variant Code")
                            {
                                //DecimalPlaces = 0:5;
                            }
                            column(TempPostedAsmLineDescription; BlanksForIndent + TempPostedAsmLine.Description)
                            {
                            }
                            column(TempPostedAsmLineNo; BlanksForIndent + TempPostedAsmLine."No.")
                            {
                            }
                            column(AsmLoop_Number; Number)
                            {
                            }

                            trigger OnAfterGetRecord()
                            begin
                                if Number = 1 then
                                    TempPostedAsmLine.FindSet
                                else
                                    TempPostedAsmLine.Next;
                            end;

                            trigger OnPreDataItem()
                            begin
                                Clear(TempPostedAsmLine);
                                SetRange(Number, 1, TempPostedAsmLine.Count);
                            end;
                        }

                        trigger OnAfterGetRecord()
                        var
                            TbProducto: Record Item;
                            TItemLedgEntryTMP: Record "Item Ledger Entry" temporary;
                            TValueEntryRelation: Record "Value Entry Relation";
                            TValueEntry: Record "Value Entry";
                            TItemApplEntry: Record "Item Application Entry";
                            TItemLedgEntry: Record "Item Ledger Entry";
                            Filtro: Text[250];
                            LotNoInformation: Record "Lot No. Information";
                            UnitOfMeasure: Record "Unit of Measure";
                            ItemCrossReference: Record "Item Cross Reference";

                            ///variables para los valores de los  atributos 
                            MapeoValorAtributo: Record "Item Attribute Value Mapping";
                            ValorAtributoProducto: Record "Item Attribute Value";
                            Ancho: Text[250];
                            Largo: Text[250];
                            Alto: Text[250];
                            AltoAsiento: Text[250];

                        begin
                            OnLineNumber := OnLineNumber + 1;

                            with TempSalesInvoiceLine do begin
                                if OnLineNumber = 1 then
                                    Find('-')
                                else
                                    Next;

                                OrderedQuantity := 0;
                                if "Sales Invoice Header"."Order No." = '' then
                                    OrderedQuantity := Quantity
                                else
                                    if OrderLine.Get(1, "Sales Invoice Header"."Order No.", "Line No.") then
                                        OrderedQuantity := OrderLine.Quantity
                                    else begin
                                        ShipmentLine.SetRange("Order No.", "Sales Invoice Header"."Order No.");
                                        ShipmentLine.SetRange("Order Line No.", "Line No.");
                                        if ShipmentLine.Find('-') then
                                            repeat
                                                OrderedQuantity := OrderedQuantity + ShipmentLine.Quantity;
                                            until 0 = ShipmentLine.Next;
                                    end;

                                DescriptionToPrint := Description + ' ' + "Description 2";
                                if Type = 0 then begin
                                    if OnLineNumber < NumberOfLines then begin
                                        Next;
                                        if Type = 0 then begin
                                            DescriptionToPrint :=
                                              CopyStr(DescriptionToPrint + ' ' + Description + ' ' + "Description 2", 1, MaxStrLen(DescriptionToPrint));
                                            OnLineNumber := OnLineNumber + 1;
                                            SalesInvLine.Next;
                                        end else
                                            Next(-1);
                                    end;
                                    "No." := '';
                                    "Unit of Measure" := '';
                                    Amount := 0;
                                    "Amount Including VAT" := 0;
                                    "Inv. Discount Amount" := 0;
                                    Quantity := 0;
                                end else
                                    if Type = Type::"G/L Account" then
                                        "No." := '';

                                if "No." = '' then begin
                                    HighDescriptionToPrint := DescriptionToPrint;
                                    LowDescriptionToPrint := '';
                                end else begin
                                    HighDescriptionToPrint := '';
                                    LowDescriptionToPrint := DescriptionToPrint;
                                end;

                                if Amount <> "Amount Including VAT" then
                                    TaxLiable := Amount
                                else
                                    TaxLiable := 0;

                                AmountExclInvDisc := Amount + "Inv. Discount Amount";

                                if Quantity = 0 then
                                    UnitPriceToPrint := 0 // so it won't print
                                else
                                    UnitPriceToPrint := Round(AmountExclInvDisc / Quantity, 0.00001);
                                TotalAmountIncludingVAT += "Amount Including VAT";
                            end;

                            CollectAsmInformation(TempSalesInvoiceLine);
                            if OnLineNumber = NumberOfLines then
                                ConvertAmounttoWords(TotalAmountIncludingVAT);



                            //////Busqueda de pedimento
                            // LineaConPedimento := TempSalesInvoiceLine.Description;
                            TItemLedgEntryTMP.DELETEALL;

                            IF (TempSalesInvoiceLine.Type = TempSalesInvoiceLine.Type::Item) AND
                               (TempSalesInvoiceLine.Quantity <> 0) THEN BEGIN


                                IF (TbProducto.GET(TempSalesInvoiceLine."No.")) AND
                                   (TbProducto."Item Tracking Code" <> '') THEN BEGIN

                                    //Registros:= 0;
                                    Filtro := '"113";"0";"' + TempSalesInvoiceLine."Document No." + '";"";"0";"' + FORMAT(TempSalesInvoiceLine."Line No.") + '"';
                                    TValueEntryRelation.RESET;
                                    TValueEntryRelation.SETCURRENTKEY("Source RowId");
                                    TValueEntryRelation.SETFILTER("Source RowId", Filtro);
                                    IF TValueEntryRelation.FIND('-') THEN
                                        REPEAT
                                            TValueEntry.GET(TValueEntryRelation."Value Entry No.");
                                            TItemApplEntry.RESET;
                                            TItemApplEntry.SETCURRENTKEY("Item Ledger Entry No.", "Outbound Item Entry No.", "Cost Application");
                                            TItemApplEntry.SETFILTER("Item Ledger Entry No.", '%1', TValueEntry."Item Ledger Entry No.");
                                            TItemApplEntry.SETFILTER("Outbound Item Entry No.", '%1', TValueEntry."Item Ledger Entry No.");
                                            IF TItemApplEntry.FIND('-') THEN
                                                REPEAT
                                                    TItemLedgEntry.GET(TItemApplEntry."Inbound Item Entry No.");
                                                    TItemLedgEntryTMP.RESET;
                                                    TItemLedgEntryTMP.SETFILTER("Lot No.", TItemLedgEntry."Lot No.");
                                                    IF NOT TItemLedgEntryTMP.FIND('-') THEN BEGIN
                                                        TItemLedgEntryTMP.INIT;
                                                        TItemLedgEntryTMP.TRANSFERFIELDS(TItemLedgEntry);
                                                        TItemLedgEntryTMP.INSERT;
                                                    END;
                                                UNTIL TItemApplEntry.NEXT = 0;
                                        UNTIL TValueEntryRelation.NEXT = 0;
                                END;
                                Clear(Pedimento);
                                Clear(AjenteAduanal);
                                Clear(Fechapedimento);
                                IF TItemLedgEntryTMP.FINDFIRST THEN BEGIN

                                    //LineaConPedimento := LineaConPedimento + ' Pedimento';

                                    TItemLedgEntryTMP.RESET;

                                    REPEAT

                                        //LineaConPedimento := LineaConPedimento + ' ' + TItemLedgEntryTMP."Lot No.";

                                        LotNoInformation.SetRange("Item No.", TempSalesInvoiceLine."No.");
                                        LotNoInformation.SetRange("Variant Code", '');

                                        LotNoInformation.SetRange("Lot No.", TItemLedgEntryTMP."Lot No.");

                                        if LotNoInformation.FindFirst() then begin

                                            //if "Sales Invoice Line"."No." = LotNoInformation."Item No." then begin
                                            Pedimento := TItemLedgEntryTMP."Lot No.";
                                            AjenteAduanal := LotNoInformation.PuertoEntrada;//  AjenteAduanal; ///cambio el valor 
                                            Fechapedimento := LotNoInformation.FechaPedimento;
                                            //Message(' llego el pedimento %1   Ajente %2, Fecha %3   diferencia lineaConPedimento %4', TItemLedgEntryTMP."Lot No.", AjenteAduanal, Fechapedimento, LineaConPedimento);
                                            //end;

                                        end;

                                    UNTIL TItemLedgEntryTMP.NEXT = 0;

                                END;
                            END;

                            ///Averigua Unidad de Medida SAT
                            TbProducto.Reset();
                            TbProducto.SetRange("No.", TempSalesInvoiceLine."No.");
                            if TbProducto.FindFirst() then begin
                                UnitOfMeasure.SetRange(Code, TbProducto."Base Unit of Measure");
                                if UnitOfMeasure.FindFirst() then begin
                                    UnidadSAT := UnitOfMeasure."SAT UofM Classification";
                                end;

                                ClaveSAT := TbProducto."SAT Item Classification";


                                Ancho := '';
                                Largo := '';
                                Alto := '';
                                medidas := '';
                                MapeoValorAtributo.SetRange("Table ID", 27);
                                MapeoValorAtributo.SetRange("No.", TbProducto."No.");
                                if MapeoValorAtributo.FindSet() then begin
                                    repeat
                                        ValorAtributoProducto.Reset();
                                        ValorAtributoProducto.SetRange("Attribute ID", MapeoValorAtributo."Item Attribute ID");
                                        ValorAtributoProducto.SetRange(ID, MapeoValorAtributo."Item Attribute Value ID");
                                        if ValorAtributoProducto.FindFirst() then begin
                                            //valores  id 

                                            //ancho 
                                            if ValorAtributoProducto."Attribute ID" = 16 then begin
                                                Ancho := ValorAtributoProducto.Value;
                                            end;

                                            //largo
                                            if ValorAtributoProducto."Attribute ID" = 15 then begin
                                                Largo := ValorAtributoProducto.Value;
                                            end;
                                            //Alto Asiento
                                            if ValorAtributoProducto."Attribute ID" = 14 then begin
                                                AltoAsiento := ValorAtributoProducto.Value;
                                            end;

                                            //alto
                                            if ValorAtributoProducto."Attribute ID" = 13 then begin
                                                Alto := ValorAtributoProducto.Value;
                                            end;

                                        end;

                                    until MapeoValorAtributo.Next() = 0;

                                    if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                        medidas := Largo + ' x ' + Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                                    end;

                                    if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                        medidas := Largo + ' x ' + Ancho + ' " " x ' + AltoAsiento;
                                    end;

                                    if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                                        medidas := Largo + ' x ' + Ancho + ' " " " " ';
                                    end;

                                    if ((Largo <> '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                        medidas := Largo + ' x  " "' + ' x ' + Alto + ' x ' + AltoAsiento;
                                    end;
                                    if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                        medidas := Largo + ' x " "' + ' x  " "' + ' x ' + AltoAsiento;
                                    end;
                                    if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento = '') then begin
                                        medidas := Largo;
                                    end;
                                    if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                        medidas := '" " x ' + Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                                    end;
                                    if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                        medidas := '" " x ' + Ancho + ' x " "' + ' x ' + AltoAsiento;
                                    end;
                                    if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                                        medidas := '" " x ' + Ancho;
                                    end;
                                    if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                        medidas := '" " x " "' + ' x ' + Alto + ' x ' + AltoAsiento;
                                    end;
                                    if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                        medidas := '" " x  " "' + ' x ' + Alto;
                                    end;
                                    if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                        medidas := '" " x ' + Ancho + ' x ' + Alto;
                                    end;
                                    if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                        medidas := Largo + ' x ' + Ancho + ' x ' + Alto;
                                    end;
                                    if ((Largo = '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                        medidas := '" " x " " x " " x ' + AltoAsiento;
                                    end;

                                end;


                            end;

                            ///  busca si tiene referencia cruzada , y descripcion
                            //repeat
                            //ItemCrossReference.SetRange("Cross-Reference Type No.", TempSalesInvoiceLine."Cross-Reference Type No.");
                            ItemCrossReference.SetRange("Cross-Reference Type No.", "Sales Invoice Header"."Bill-to Customer No.");
                            ItemCrossReference.SetRange("Item No.", TempSalesInvoiceLine."No.");
                            ItemCrossReference.SetRange("Cross-Reference Type", ItemCrossReference."Cross-Reference Type"::Customer);
                            if ItemCrossReference.FindFirst() then begin
                                NvoCodigo := ItemCrossReference."Cross-Reference No.";
                                NvaDescripcion := ItemCrossReference.Description;
                            end else begin
                                // Message('dejar los estandar');
                                NvoCodigo := TempSalesInvoiceLine."No.";
                                NvaDescripcion := TempSalesInvoiceLine.Description;
                            end;
                            //ItemCrossReference.SetRange("Cross-Reference No.",TempSalesInvoiceLine."Cross-Reference No.");
                            // Message('valores de %1 , %2', NvoCodigo, NvaDescripcion);
                            //until TempSalesInvoiceLine.Next() = 0;
                        end;

                        trigger OnPreDataItem()
                        begin
                            //CurrReport.CreateTotals(TaxLiable,AmountExclInvDisc,TempSalesInvoiceLine.Amount,TempSalesInvoiceLine."Amount Including VAT");
                            NumberOfLines := TempSalesInvoiceLine.Count;
                            SetRange(Number, 1, NumberOfLines);
                            OnLineNumber := 0;
                            TotalAmountIncludingVAT := 0;
                        end;
                    }
                    dataitem(OriginalStringLoop; "Integer")
                    {
                        DataItemTableView = SORTING(Number);
                        column(OriginalStringText; OriginalStringText)
                        {
                        }
                        column(OriginalStringLoop_Number; Number)
                        {
                        }
                        column(Original_StringCaption; Original_StringCaptionLbl)
                        {
                        }

                        trigger OnAfterGetRecord()
                        var
                            ReturnLength: Integer;
                        begin
                            OriginalStringText := '';
                            ReturnLength := OriginalStringBigText.GetSubText(OriginalStringText, Position, MaxStrLen(OriginalStringText));
                            Position := Position + ReturnLength;
                        end;

                        trigger OnPreDataItem()
                        begin
                            SetRange(Number, 1, Round(OriginalStringBigText.Length / MaxStrLen(OriginalStringText), 1, '>'));
                            Position := 1;
                        end;
                    }
                    dataitem(DigitalSignaturePACLoop; "Integer")
                    {
                        DataItemTableView = SORTING(Number);
                        column(DigitalSignaturePACText; DigitalSignaturePACText)
                        {
                        }
                        column(DigitalSignaturePACLoop_Number; Number)
                        {
                        }
                        column(Digital_StampCaption; Digital_StampCaptionLbl)
                        {
                        }

                        trigger OnAfterGetRecord()
                        var
                            ReturnLength: Integer;
                        begin
                            DigitalSignaturePACText := '';
                            ReturnLength := DigitalSignaturePACBigText.GetSubText(DigitalSignaturePACText, Position, MaxStrLen(DigitalSignaturePACText));
                            Position := Position + ReturnLength;
                        end;

                        trigger OnPreDataItem()
                        begin
                            SetRange(Number, 1, Round(DigitalSignaturePACBigText.Length / MaxStrLen(DigitalSignaturePACText), 1, '>'));
                            Position := 1;
                        end;
                    }
                    dataitem(DigitalSignatureLoop; "Integer")
                    {
                        DataItemTableView = SORTING(Number);
                        column(DigitalSignatureText; DigitalSignatureText)
                        {
                        }
                        column(DigitalSignatureLoop_Number; Number)
                        {
                        }
                        column(Digital_stampCaption_Control1020008; Digital_stampCaption_Control1020008Lbl)
                        {
                        }

                        trigger OnAfterGetRecord()
                        var
                            ReturnLength: Integer;
                        begin
                            DigitalSignatureText := '';
                            ReturnLength := DigitalSignatureBigText.GetSubText(DigitalSignatureText, Position, MaxStrLen(DigitalSignatureText));
                            Position := Position + ReturnLength;
                        end;

                        trigger OnPreDataItem()
                        begin
                            SetRange(Number, 1, Round(DigitalSignatureBigText.Length / MaxStrLen(DigitalSignatureText), 1, '>'));
                            Position := 1;
                        end;
                    }
                    dataitem(QRCode; "Integer")
                    {
                        DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));
                        column(Sales_Invoice_Header___QR_Code_; "Sales Invoice Header"."QR Code")
                        {
                        }
                        column(QRCode_Number; Number)
                        {
                        }

                        trigger OnAfterGetRecord()
                        begin
                            "Sales Invoice Header".CalcFields("QR Code");
                        end;
                    }
                }

                trigger OnAfterGetRecord()
                begin
                    //CurrReport.PageNo := 1;

                    if CopyNo = NoLoops then begin
                        if not CurrReport.Preview then
                            SalesInvPrinted.Run("Sales Invoice Header");
                        CurrReport.Break;
                    end;
                    CopyNo := CopyNo + 1;
                    if CopyNo = 1 then // Original
                        Clear(CopyTxt)
                    else
                        CopyTxt := Text000;
                end;

                trigger OnPreDataItem()
                begin
                    NoLoops := 1 + Abs(NoCopies) + Customer."Invoice Copies";
                    if NoLoops <= 0 then
                        NoLoops := 1;
                    CopyNo := 0;
                end;
            }

            trigger OnAfterGetRecord()
            var
                SATUtilities: Codeunit "SAT UtilitiesExten";// "SAT Utilities";
                EInvoiceMgt: Codeunit "E-Invoice Mgt_Enten";// "E-Invoice Mgt.";
                DummySalesInvoiceNumber: Code[20];
                VendedorComprador: Record "Salesperson/Purchaser";
                SalesInvLine: Record "Sales Invoice Line";
            ////////////////////////////////////////////////////////////////7


            begin
                // busca el Folio y La serie
                NoFolio := DelChr("Sales Invoice Header"."No.", '=', 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ-');
                Serie := DelChr("Sales Invoice Header"."No.", '=', '0123456789-');

                if "Source Code" = SourceCodeSetup."Deleted Document" then
                    Error(Text012);

                if PrintCompany then
                    if RespCenter.Get("Responsibility Center") then begin
                        FormatAddress.RespCenter(CompanyAddress, RespCenter);
                        CompanyInformation."Phone No." := RespCenter."Phone No.";
                        CompanyInformation."Fax No." := RespCenter."Fax No.";
                    end;
                CurrReport.Language := 2058;
                //Language.GetLanguageID("Language Code");

                if "Salesperson Code" = '' then
                    Clear(SalesPurchPerson)
                else
                    SalesPurchPerson.Get("Salesperson Code");

                if not Customer.Get("Bill-to Customer No.") then begin
                    Clear(Customer);
                    "Bill-to Name" := Text009;
                    "Ship-to Name" := Text009;
                end;
                DocumentText := Text010;
                if "Prepayment Invoice" then
                    DocumentText := Text011;

                FormatAddress.SalesInvBillTo(BillToAddress, "Sales Invoice Header");
                FormatAddress.SalesInvShipTo(ShipToAddress, ShipToAddress, "Sales Invoice Header");

                if "Payment Terms Code" = '' then
                    Clear(PaymentTerms)
                else
                    PaymentTerms.Get("Payment Terms Code");

                if "Shipment Method Code" = '' then
                    Clear(ShipmentMethod)
                else
                    ShipmentMethod.Get("Shipment Method Code");

                if LogInteraction then
                    if not CurrReport.Preview then begin
                        if "Bill-to Contact No." <> '' then
                            SegManagement.LogDocument(
                              4, "No.", 0, 0, DATABASE::Contact, "Bill-to Contact No.", "Salesperson Code",
                              "Campaign No.", "Posting Description", '')
                        else
                            SegManagement.LogDocument(
                              4, "No.", 0, 0, DATABASE::Customer, "Bill-to Customer No.", "Salesperson Code",
                              "Campaign No.", "Posting Description", '');
                    end;

                "Sales Invoice Header".CalcFields("Original String", "Digital Stamp SAT", "Digital Stamp PAC");
                Clear(OriginalStringBigText);
                TempBlob.Blob := "Sales Invoice Header"."Original String";
                BlobMgt.Read(OriginalStringBigText, TempBlob);
                TempBlob.Blob := "Sales Invoice Header"."Digital Stamp SAT";
                Clear(DigitalSignatureBigText);
                BlobMgt.Read(DigitalSignatureBigText, TempBlob);
                TempBlob.Blob := "Sales Invoice Header"."Digital Stamp PAC";
                Clear(DigitalSignaturePACBigText);
                BlobMgt.Read(DigitalSignaturePACBigText, TempBlob);

                SATPaymentMethod := SATUtilities.GetSATPaymentMethodDescription("Payment Method Code"); // MetodoPago
                SATPaymentTerm := SATUtilities.GetSATPaymentTermDescription("Payment Terms Code"); // FormaPago

                SATFolioFiscal := EInvoiceMgt.GetUUIDFromOriginalPrepayment("Sales Invoice Header", DummySalesInvoiceNumber);// Folio Fiscal
                if SATFolioFiscal <> '' then
                    SATTipoRelacion := TipoRelacionTxt;


                "Sales Invoice Header".Reset();
                "Sales Invoice Header".SetRange("No.", "No.");
                if "Sales Invoice Header".FindFirst() then begin
                    if "Sales Invoice Header"."Currency Code" = '' then begin
                        Divisa := 'MXN';
                        TCambio := 1;
                    end else begin
                        Divisa := "Sales Invoice Header"."Currency Code";
                        TCambio := 1 / "Sales Invoice Header"."Currency Factor";
                    end;


                    VendedorComprador.SetRange(Code, "Sales Invoice Header"."Salesperson Code");
                    if VendedorComprador.FindFirst() then begin
                        NombreVendedor := VendedorComprador.Name;
                    end;
                end;


                // Mi Proceso
                PBANumeroFacturaFiscal := '';
                PBATable.SetRange("Document No.", "No.");
                if PBATable.FindFirst() then
                    repeat

                        PBANumeroFacturaFiscal := PBANumeroFacturaFiscal + '  ,  ' + PBATable."Fiscal Invoice Number PAC";

                    until PBATable.Next() = 0;

                ///////////// CalcularImagen del LOGO YSS

                PBACompanyInfo.Get();
                PBACompanyInfo.CalcFields(Picture);






                ///////////////// averigua los descuentos
                SDescuento := 0;
                SumInvDisc := 0;
                //SalesInvLine.SetRange("Document Type", salesline."Document Type"::Order);
                SalesInvLine.SetRange("Document No.", "No.");

                if SalesInvLine.FindFirst() then begin
                    repeat
                        SDescuento := SDescuento + SalesInvLine."Line Discount Amount";
                        SumInvDisc := SumInvDisc + SalesInvLine."Inv. Discount Amount";

                    until SalesInvLine.Next() = 0;
                    TotalDescuentos := SumInvDisc + SDescuento;

                end;
                ///////////// termina busqueda de  descuentos.
            end;
        }


    }


    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Opciones)
                {
                    Caption = 'Options';
                    field(NoCopies; NoCopies)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Number of Copies';
                        ToolTip = 'Specifies the number of copies to print of the document.';
                    }
                    field(PrintCompany; PrintCompany)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Company Address';
                        ToolTip = 'Specifies if the printed document includes your company address.';
                        Visible = false;
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Log Interaction';
                        Enabled = LogInteractionEnable;
                        ToolTip = 'Specifies that interactions with contact persons in connection with the report are logged.';
                    }
                }
            }
        }

        actions
        {
        }

        trigger OnInit()
        begin
            LogInteractionEnable := true;
        end;

        trigger OnOpenPage()
        begin
            InitLogInteraction;
            LogInteractionEnable := LogInteraction;
        end;
    }

    labels
    {
    }

    trigger OnPreReport()
    var
        SATUtilities: Codeunit "SAT UtilitiesExten";// "SAT Utilities";
    begin
        ShipmentLine.SetCurrentKey("Order No.", "Order Line No.");
        if not CurrReport.UseRequestPage then
            InitLogInteraction;

        CompanyInformation.Get;
        SalesSetup.Get;
        SourceCodeSetup.Get;
        PrintCompany := true;

        case SalesSetup."Logo Position on Documents" of
            SalesSetup."Logo Position on Documents"::"No Logo":
                ;
            SalesSetup."Logo Position on Documents"::Left:
                CompanyInformation.CalcFields(Picture);
            SalesSetup."Logo Position on Documents"::Center:
                begin
                    CompanyInfo1.Get;
                    CompanyInfo1.CalcFields(Picture);
                end;
            SalesSetup."Logo Position on Documents"::Right:
                begin
                    CompanyInfo2.Get;
                    CompanyInfo2.CalcFields(Picture);
                end;
        end;

        if PrintCompany then
            FormatAddress.Company(CompanyAddress, CompanyInformation)
        else
            Clear(CompanyAddress);

        SATTaxRegimeClassification := SATUtilities.GetSATTaxSchemeDescription(CompanyInformation."SAT Tax Regime Classification");
    end;

    var

        medidas: Text[750];
        SDescuento: Decimal;
        SumInvDisc: Decimal;
        TotalDescuentos: Decimal;
        impuesto: Decimal;
        SATUseCode: Record "SAT Use Code";
        UsoCFDI: Text[100];
        NombreVendedor: Text[50];
        Divisa: Code[10];

        TCambio: Decimal;
        TaxLiable: Decimal;
        OrderedQuantity: Decimal;
        UnitPriceToPrint: Decimal;
        AmountExclInvDisc: Decimal;
        ShipmentMethod: Record "Shipment Method";
        PaymentTerms: Record "Payment Terms";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInformation: Record "Company Information";
        CompanyInfo1: Record "Company Information";
        CompanyInfo2: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        Customer: Record Customer;
        OrderLine: Record "Sales Line";
        ShipmentLine: Record "Sales Shipment Line";
        TempSalesInvoiceLine: Record "Sales Invoice Line" temporary;
        TempSalesInvoiceLineAsm: Record "Sales Invoice Line" temporary;
        RespCenter: Record "Responsibility Center";
        // Language: Codeunit Language;// Record Language;
        TempPostedAsmLine: Record "Posted Assembly Line" temporary;
        TempBlob: Record TempBlobExten;
        SourceCodeSetup: Record "Source Code Setup";
        TranslationManagement: Report CheckTranslationExten;//"Check Translation Management"; //
        BlobMgt: Codeunit BlobManagementExten;
        CompanyAddress: array[8] of Text[50];
        BillToAddress: array[8] of Text[50];
        ShipToAddress: array[8] of Text[50];
        CopyTxt: Text[10];
        DescriptionToPrint: Text[210];
        HighDescriptionToPrint: Text[210];
        LowDescriptionToPrint: Text[210];
        PrintCompany: Boolean;
        NoCopies: Integer;
        NoLoops: Integer;
        CopyNo: Integer;
        NumberOfLines: Integer;
        OnLineNumber: Integer;
        HighestLineNo: Integer;
        SpacePointer: Integer;
        SalesInvPrinted: Codeunit "Sales Inv.-Printed";
        FormatAddress: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        Position: Integer;
        LogInteraction: Boolean;
        Text000: Label 'COPY';
        Text001: Label 'Transferred from page %1';
        Text002: Label 'Transferred to page %1';
        TotalAmountIncludingVAT: Decimal;
        OriginalStringText: Text[160];
        DigitalSignatureText: Text[150];
        DigitalSignaturePACText: Text[120];
        AmountInWords: array[2] of Text[80];
        Text009: Label 'VOID INVOICE';
        DocumentText: Text[100];
        OriginalStringBigText: BigText;
        DigitalSignatureBigText: BigText;
        Text010: Label 'ELECTRONIC INVOICE';
        Text011: Label 'ELECTRONIC PREPAYMENT REQUEST';
        Text012: Label 'You can not sign or send or print a deleted document.';
        Text013: Label '%1, %2';
        DigitalSignaturePACBigText: BigText;
        [InDataSet]
        LogInteractionEnable: Boolean;
        DisplayAssemblyInformation: Boolean;
        BillCaptionLbl: Label 'Bill-To:';
        Ship_ViaCaptionLbl: Label 'Ship Via';
        Ship_DateCaptionLbl: Label 'Ship Date';
        Due_DateCaptionLbl: Label 'Due Date';
        TermsCaptionLbl: Label 'Terms';
        Customer_IDCaptionLbl: Label 'Customer ID';
        P_O__NumberCaptionLbl: Label 'P.O. Number';
        P_O__DateCaptionLbl: Label 'P.O. Date';
        Our_Order_No_CaptionLbl: Label 'Our Order No.';
        SalesPersonCaptionLbl: Label 'SalesPerson';
        ShipCaptionLbl: Label 'Ship-To:';
        Page_CaptionLbl: Label 'Page:';
        CompanyInformation__RFC_No__CaptionLbl: Label 'Company RFC';
        FolioTextCaptionLbl: Label 'Folio:';
        Sales_Invoice_Header___Certificate_Serial_No__CaptionLbl: Label 'Certificate Serial No.';
        NoSeriesLine__Authorization_Code_CaptionLbl: Label 'Date and time of certification:';
        NoSeriesLine__Authorization_Year_CaptionLbl: Label 'Location and Issue date:';
        Customer__RFC_No__CaptionLbl: Label 'Customer RFC';
        Customer__Phone_No__CaptionLbl: Label 'Phone number ';
        Item_DescriptionCaptionLbl: Label 'Descripción';
        UnitCaptionLbl: Label 'UNIDAD';
        Order_QtyCaptionLbl: Label 'Order Qty';
        QuantityCaptionLbl: Label 'Cantidad';
        Unit_PriceCaptionLbl: Label 'P/U';
        Total_PriceCaptionLbl: Label 'Importe';
        Subtotal_CaptionLbl: Label 'Subtotal';
        Invoice_Discount_CaptionLbl: Label 'Especial';
        Total_CaptionLbl: Label 'Total';
        Amount_in_words_CaptionLbl: Label 'Importe con letra:';
        TempSalesInvoiceLine__Amount_Including_VAT____TempSalesInvoiceLine_AmountCaptionLbl: Label 'Traslado iva tasa 0.1600';
        Original_StringCaptionLbl: Label 'Cadena original del complemento de certificación digital del SAT';
        Digital_StampCaptionLbl: Label 'Sello digital del SAT';
        Digital_stampCaption_Control1020008Lbl: Label 'Sello digital del CFDI';
        DocumentFooterLbl: Label '"Este documento es una representación impresa de un CFDI."';
        SATPaymentMethod: Text[50];
        SATPaymentTerm: Text[50];
        SATTaxRegimeClassification: Text[100];
        TaxRegimeLbl: Label 'Regimen Fiscal:';
        SATTipoRelacion: Text[100];
        SATFolioFiscal: Text[100];
        TipoRelacionTxt: Label '07 CFDI por aplicacion de anticipo';
        Pedimento: Code[50];
        AjenteAduanal: Text[250];
        Fechapedimento: Date;

        //Mis Variables
        PBATable: Record "CFDI Relation Document";
        PBANumeroFacturaFiscal: Text;
        PBACompanyInfo: Record "Company Information";


        NvoPedimento: Code[50];

        NoFolio: Code[20];
        Serie: Code[20];
        UnidadSAT: Code[10];
        ClaveSAT: Code[10];
        NvaDescripcion: Text[100];
        NvoCodigo: Code[20];

    procedure InitLogInteraction()
    begin
        LogInteraction := SegManagement.FindInteractTmplCode(4) <> '';
    end;

    procedure ConvertAmounttoWords(AmountLoc: Decimal)
    var
        LanguageId: Integer;
    begin
        if CurrReport.Language in [1033, 3084, 2058, 4105] then
            LanguageId := CurrReport.Language
        else
            LanguageId := GlobalLanguage;
        TranslationManagement.FormatNoText(AmountInWords, AmountLoc,
          LanguageId, "Sales Invoice Header"."Currency Code");
        // Message('Cantidad letra %1', AmountInWords[1]);

    end;


    procedure CollectAsmInformation(TempSalesInvoiceLine: Record "Sales Invoice Line" temporary)
    var
        ValueEntry: Record "Value Entry";
        ItemLedgerEntry: Record "Item Ledger Entry";
        PostedAsmHeader: Record "Posted Assembly Header";
        PostedAsmLine: Record "Posted Assembly Line";
        SalesShipmentLine: Record "Sales Shipment Line";
        SalesInvoiceLine: Record "Sales Invoice Line";
    begin
        TempPostedAsmLine.DeleteAll;
        if not DisplayAssemblyInformation then
            exit;
        if not TempSalesInvoiceLineAsm.Get(TempSalesInvoiceLine."Document No.", TempSalesInvoiceLine."Line No.") then
            exit;
        SalesInvoiceLine.Get(TempSalesInvoiceLineAsm."Document No.", TempSalesInvoiceLineAsm."Line No.");
        if SalesInvoiceLine.Type <> SalesInvoiceLine.Type::Item then
            exit;
        with ValueEntry do begin
            SetCurrentKey("Document No.");
            SetRange("Document No.", SalesInvoiceLine."Document No.");
            SetRange("Document Type", "Document Type"::"Sales Invoice");
            SetRange("Document Line No.", SalesInvoiceLine."Line No.");
            if not FindSet then
                exit;
        end;
        repeat
            if ItemLedgerEntry.Get(ValueEntry."Item Ledger Entry No.") then
                if ItemLedgerEntry."Document Type" = ItemLedgerEntry."Document Type"::"Sales Shipment" then begin
                    SalesShipmentLine.Get(ItemLedgerEntry."Document No.", ItemLedgerEntry."Document Line No.");
                    if SalesShipmentLine.AsmToShipmentExists(PostedAsmHeader) then begin
                        PostedAsmLine.SetRange("Document No.", PostedAsmHeader."No.");
                        if PostedAsmLine.FindSet then
                            repeat
                                TreatAsmLineBuffer(PostedAsmLine);
                            until PostedAsmLine.Next = 0;
                    end;
                end;
        until ValueEntry.Next = 0;
    end;


    procedure TreatAsmLineBuffer(PostedAsmLine: Record "Posted Assembly Line")
    begin
        Clear(TempPostedAsmLine);
        TempPostedAsmLine.SetRange(Type, PostedAsmLine.Type);
        TempPostedAsmLine.SetRange("No.", PostedAsmLine."No.");
        TempPostedAsmLine.SetRange("Variant Code", PostedAsmLine."Variant Code");
        TempPostedAsmLine.SetRange(Description, PostedAsmLine.Description);
        TempPostedAsmLine.SetRange("Unit of Measure Code", PostedAsmLine."Unit of Measure Code");
        if TempPostedAsmLine.FindFirst then begin
            TempPostedAsmLine.Quantity += PostedAsmLine.Quantity;
            TempPostedAsmLine.Modify;
        end else begin
            Clear(TempPostedAsmLine);
            TempPostedAsmLine := PostedAsmLine;
            TempPostedAsmLine.Insert;
        end;
    end;

    procedure GetUOMText(UOMCode: Code[10]): Text[10]
    var
        UnitOfMeasure: Record "Unit of Measure";
    begin
        if not UnitOfMeasure.Get(UOMCode) then
            exit(UOMCode);
        exit(UnitOfMeasure.Description);
    end;

    procedure BlanksForIndent(): Text[10]
    begin
        exit(PadStr('', 2, ' '));
    end;
}
report 50105 "NotaCreditoMX"
{
    // version Business Central 15.

    DefaultLayout = RDLC;
    RDLCLayout = './NotaCreditoNamuhMX.rdl';
    Caption = 'Nota de credito electrónica Namuh';
    Permissions = TableData "Sales Cr.Memo Line" = rimd;

    dataset
    {
        dataitem("Sales Cr.Memo Header"; "Sales Cr.Memo Header")
        {
            DataItemTableView = SORTING("No.");
            PrintOnlyIfDetail = true;
            RequestFilterFields = "No.", "Sell-to Customer No.", "Bill-to Customer No.", "Ship-to Code", "No. Printed";
            RequestFilterHeading = 'Sales Credit Memo';
            column(Sales_Cr_Memo_Header_No_; "No.")
            {
            }
            column(DocumentFooter; DocumentFooterLbl)
            {
            }
            column(CFDI_Purpose; "CFDI Purpose") { }

            column(NoFolio; NoFolio) { }
            column(Serie; Serie) { }

            dataitem("Sales Cr.Memo Line"; "Sales Cr.Memo Line")
            {
                DataItemLink = "Document No." = FIELD("No.");
                DataItemTableView = SORTING("Document No.", "Line No.");
                dataitem(SalesLineComments; "Sales Comment Line")
                {
                    DataItemLink = "No." = FIELD("Document No."), "Document Line No." = FIELD("Line No.");
                    DataItemTableView = SORTING("Document Type", "No.", "Document Line No.", "Line No.") WHERE("Document Type" = CONST("Posted Credit Memo"), "Print On Credit Memo" = CONST(true));

                    trigger OnAfterGetRecord()
                    begin
                        with TempSalesCrMemoLine do begin
                            Init;
                            "Document No." := "Sales Cr.Memo Header"."No.";
                            "Line No." := HighestLineNo + 10;
                            HighestLineNo := "Line No.";
                        end;
                        if StrLen(Comment) <= MaxStrLen(TempSalesCrMemoLine.Description) then begin
                            TempSalesCrMemoLine.Description := Comment;
                            TempSalesCrMemoLine."Description 2" := '';
                        end else begin
                            SpacePointer := MaxStrLen(TempSalesCrMemoLine.Description) + 1;
                            while (SpacePointer > 1) and (Comment[SpacePointer] <> ' ') do
                                SpacePointer := SpacePointer - 1;
                            if SpacePointer = 1 then
                                SpacePointer := MaxStrLen(TempSalesCrMemoLine.Description) + 1;
                            TempSalesCrMemoLine.Description := CopyStr(Comment, 1, SpacePointer - 1);
                            TempSalesCrMemoLine."Description 2" :=
                              CopyStr(CopyStr(Comment, SpacePointer + 1), 1, MaxStrLen(TempSalesCrMemoLine."Description 2"));
                        end;
                        TempSalesCrMemoLine.Insert;
                    end;
                }

                trigger OnAfterGetRecord()
                begin
                    TempSalesCrMemoLine := "Sales Cr.Memo Line";
                    TempSalesCrMemoLine.Insert;
                    HighestLineNo := "Line No.";
                end;

                trigger OnPreDataItem()
                begin
                    TempSalesCrMemoLine.Reset;
                    TempSalesCrMemoLine.DeleteAll;
                end;
            }
            dataitem("Sales Comment Line"; "Sales Comment Line")
            {
                DataItemLink = "No." = FIELD("No.");
                DataItemTableView = SORTING("Document Type", "No.", "Document Line No.", "Line No.") WHERE("Document Type" = CONST("Posted Credit Memo"), "Print On Credit Memo" = CONST(true), "Document Line No." = CONST(0));

                trigger OnAfterGetRecord()
                begin
                    with TempSalesCrMemoLine do begin
                        Init;
                        "Document No." := "Sales Cr.Memo Header"."No.";
                        "Line No." := HighestLineNo + 1000;
                        HighestLineNo := "Line No.";
                    end;
                    if StrLen(Comment) <= MaxStrLen(TempSalesCrMemoLine.Description) then begin
                        TempSalesCrMemoLine.Description := Comment;
                        TempSalesCrMemoLine."Description 2" := '';
                    end else begin
                        SpacePointer := MaxStrLen(TempSalesCrMemoLine.Description) + 1;
                        while (SpacePointer > 1) and (Comment[SpacePointer] <> ' ') do
                            SpacePointer := SpacePointer - 1;
                        if SpacePointer = 1 then
                            SpacePointer := MaxStrLen(TempSalesCrMemoLine.Description) + 1;
                        TempSalesCrMemoLine.Description := CopyStr(Comment, 1, SpacePointer - 1);
                        TempSalesCrMemoLine."Description 2" :=
                          CopyStr(CopyStr(Comment, SpacePointer + 1), 1, MaxStrLen(TempSalesCrMemoLine."Description 2"));
                    end;
                    TempSalesCrMemoLine.Insert;
                end;

                trigger OnPreDataItem()
                begin
                    with TempSalesCrMemoLine do begin
                        Init;
                        "Document No." := "Sales Cr.Memo Header"."No.";
                        "Line No." := HighestLineNo + 1000;
                        HighestLineNo := "Line No.";
                    end;
                    TempSalesCrMemoLine.Insert;
                end;
            }
            dataitem(CopyLoop; "Integer")
            {
                DataItemTableView = SORTING(Number);
                dataitem(PageLoop; "Integer")
                {
                    DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));
                    column(CompanyInformation_Picture; CompanyInformation.Picture)
                    {
                    }
                    column(CompanyInformation_CP; CompanyInformation."Post Code")
                    {
                    }
                    column(CompanyInformationCtiy; CompanyInformation.City)
                    { }
                    column(CompanyInformationCounty; CompanyInformation.County)
                    { }
                    column(CompanyInformationCountryRegioncode; CompanyInformation."Country/Region Code")
                    { }
                    column(NombreVendedor; NombreVendedor)
                    {

                    }
                    column(CompanyAddress_1_; CompanyAddress[1])
                    {
                    }
                    column(CompanyAddress_2_; CompanyAddress[2])
                    {
                    }
                    column(CompanyAddress_3_; CompanyAddress[3])
                    {
                    }
                    column(CompanyAddress_4_; CompanyAddress[4])
                    {
                    }
                    column(CompanyAddress_5_; CompanyAddress[5])
                    {
                    }
                    column(CompanyAddress_6_; CompanyAddress[6])
                    {
                    }
                    column(CopyTxt; CopyTxt)
                    {
                    }
                    column(BillToAddress_1_; BillToAddress[1])
                    {
                    }
                    column(BillToAddress_2_; BillToAddress[2])
                    {
                    }
                    column(BillToAddress_3_; BillToAddress[3])
                    {
                    }
                    column(BillToAddress_4_; BillToAddress[4])
                    {
                    }
                    column(BillToAddress_5_; BillToAddress[5])
                    {
                    }
                    column(BillToAddress_6_; BillToAddress[6])
                    {
                    }
                    column(BillToAddress_7_; BillToAddress[7])
                    {
                    }
                    column(Sales_Cr_Memo_Header___Shipment_Date_; "Sales Cr.Memo Header"."Shipment Date")
                    {
                    }
                    column(Sales_Cr_Memo_Header___Applies_to_Doc__Type_; "Sales Cr.Memo Header"."Applies-to Doc. Type")
                    {
                    }
                    column(Sales_Cr_Memo_Header___Applies_to_Doc__No__; "Sales Cr.Memo Header"."Applies-to Doc. No.")
                    {
                    }
                    column(ShipToAddress_1_; ShipToAddress[1])
                    {
                    }
                    column(ShipToAddress_2_; ShipToAddress[2])
                    {
                    }
                    column(ShipToAddress_3_; ShipToAddress[3])
                    {
                    }
                    column(ShipToAddress_4_; ShipToAddress[4])
                    {
                    }
                    column(ShipToAddress_5_; ShipToAddress[5])
                    {
                    }
                    column(ShipToAddress_6_; ShipToAddress[6])
                    {
                    }
                    column(ShipToAddress_7_; ShipToAddress[7])
                    {
                    }
                    column(Sales_Cr_Memo_Header___Bill_to_Customer_No__; "Sales Cr.Memo Header"."Bill-to Customer No.")
                    {
                    }
                    column(Sales_Cr_Memo_Header___Your_Reference_; "Sales Cr.Memo Header"."Your Reference")
                    {
                    }
                    column(SalesPurchPerson_Name; SalesPurchPerson.Name)
                    {
                    }
                    column(CompanyAddress_7_; CompanyAddress[7])
                    {
                    }
                    column(CompanyAddress_8_; CompanyAddress[8])
                    {
                    }
                    column(BillToAddress_8_; BillToAddress[8])
                    {
                    }
                    column(ShipToAddress_8_; ShipToAddress[8])
                    {
                    }
                    column(CopyNo; CopyNo)
                    {
                    }
                    column(CompanyInformation__RFC_No__; CompanyInformation."RFC No.")
                    {
                    }
                    column(Sales_Cr_Memo_Header___Certificate_Serial_No__; "Sales Cr.Memo Header"."Certificate Serial No.")
                    {
                    }
                    column(FolioText; "Sales Cr.Memo Header"."Fiscal Invoice Number PAC")
                    {
                    }
                    column(NoSeriesLine__Authorization_Code_; "Sales Cr.Memo Header"."Date/Time Stamped")
                    {
                    }
                    column(NoSeriesLine__Authorization_Year_; StrSubstNo(Text011, "Sales Cr.Memo Header"."Bill-to City", "Sales Cr.Memo Header"."Document Date"))
                    {
                    }
                    column(FechaDocumento; "Sales Cr.Memo Header"."Document Date") { }
                    column(TCambio; TCambio)
                    {

                    }
                    column(Divisa; Divisa)
                    {

                    }
                    column(UsoCFDI; UsoCFDI)
                    {

                    }
                    column(PBACFDI; PBACFDI) { }

                    column(Customer__RFC_No__; Customer."RFC No.")
                    {
                    }
                    column(Sales_Cr_Memo_Header___No__; "Sales Cr.Memo Header"."No.")
                    {
                    }
                    column(Customer__Phone_No__; Customer."Phone No.")
                    {
                    }
                    column(PageLoop_Number; Number)
                    {
                    }
                    column(CreditCaption; CreditCaptionLbl)
                    {
                    }
                    column(Ship_DateCaption; Ship_DateCaptionLbl)
                    {
                    }
                    column(Apply_to_TypeCaption; Apply_to_TypeCaptionLbl)
                    {
                    }
                    column(Apply_to_NumberCaption; Apply_to_NumberCaptionLbl)
                    {
                    }
                    column(Customer_IDCaption; Customer_IDCaptionLbl)
                    {
                    }
                    column(P_O__NumberCaption; P_O__NumberCaptionLbl)
                    {
                    }
                    column(SalesPersonCaption; SalesPersonCaptionLbl)
                    {
                    }
                    column(ShipCaption; ShipCaptionLbl)
                    {
                    }
                    column(CREDIT_MEMOCaption; CREDIT_MEMOCaptionLbl)
                    {
                    }
                    column(Page_Caption; Page_CaptionLbl)
                    {
                    }
                    column(CompanyInformation__RFC_No__Caption; CompanyInformation__RFC_No__CaptionLbl)
                    {
                    }
                    column(Sales_Cr_Memo_Header___Certificate_Serial_No__Caption; Sales_Cr_Memo_Header___Certificate_Serial_No__CaptionLbl)
                    {
                    }
                    column(FolioTextCaption; FolioTextCaptionLbl)
                    {
                    }
                    column(NoSeriesLine__Authorization_Code_Caption; NoSeriesLine__Authorization_Code_CaptionLbl)
                    {
                    }
                    column(NoSeriesLine__Authorization_Year_Caption; NoSeriesLine__Authorization_Year_CaptionLbl)
                    {
                    }
                    column(Customer__RFC_No__Caption; Customer__RFC_No__CaptionLbl)
                    {
                    }
                    column(Customer__Phone_No__Caption; Customer__Phone_No__CaptionLbl)
                    {
                    }
                    column(SATPaymentMethod; SATPaymentMethod)
                    {
                    }
                    column(SATPaymentTerm; SATPaymentTerm)
                    {
                    }
                    column(SATTaxRegimeClassification; SATTaxRegimeClassification)
                    {
                    }
                    column(TaxRegimeCaption; TaxRegimeLbl)
                    {
                    }
                    dataitem(SalesCrMemoLine; "Integer")
                    {
                        DataItemTableView = SORTING(Number);

                        column(AmountExclInvDisc; AmountExclInvDisc)
                        {
                        }
                        column(TempSalesCrMemoLine__No__; TempSalesCrMemoLine."No.")
                        {
                        }
                        column(TempSalesCrMemoLine__Unit_of_Measure_; TempSalesCrMemoLine."Unit of Measure")
                        {
                        }
                        column(TempSalesCrMemoLine_Quantity; TempSalesCrMemoLine.Quantity)
                        {
                            DecimalPlaces = 0 : 5;
                        }
                        column(UnitPriceToPrint; UnitPriceToPrint)
                        {
                            DecimalPlaces = 2 : 5;
                        }
                        column(AmountExclInvDisc_Control53; AmountExclInvDisc)
                        {
                        }
                        column(TempSalesCrMemoLine_Description_________TempSalesCrMemoLine__Description_2_; TempSalesCrMemoLine.Description + ' ' + TempSalesCrMemoLine."Description 2")
                        {
                        }

                        column(AmountExclInvDisc_Control40; AmountExclInvDisc)
                        {
                        }
                        column(AmountExclInvDisc_Control79; AmountExclInvDisc)
                        {
                        }
                        column(TempSalesCrMemoLine_Amount___AmountExclInvDisc; TempSalesCrMemoLine.Amount - AmountExclInvDisc)
                        {
                        }
                        column(TempSalesCrMemoLine__Amount_Including_VAT____TempSalesCrMemoLine_Amount; TempSalesCrMemoLine."Amount Including VAT" - TempSalesCrMemoLine.Amount)
                        {
                        }
                        column(TempSalesCrMemoLine__Amount_Including_VAT_; TempSalesCrMemoLine."Amount Including VAT")
                        {
                        }
                        column(AmountInWords_1_; AmountInWords[1])
                        {
                        }
                        column(AmountInWords_2_; AmountInWords[2])
                        {
                        }
                        column(SalesCrMemoLine_Number; Number)
                        {
                        }
                        column(Item_No_Caption; Item_No_CaptionLbl)
                        {
                        }
                        column(UnitCaption; UnitCaptionLbl)
                        {
                        }
                        column(DescriptionCaption; DescriptionCaptionLbl)
                        {
                        }
                        column(QuantityCaption; QuantityCaptionLbl)
                        {
                        }
                        column(Unit_PriceCaption; Unit_PriceCaptionLbl)
                        {
                        }
                        column(Total_PriceCaption; Total_PriceCaptionLbl)
                        {
                        }
                        column(Subtotal_Caption; Subtotal_CaptionLbl)
                        {
                        }
                        column(Invoice_Discount_Caption; Invoice_Discount_CaptionLbl)
                        {
                        }
                        column(Total_Caption; Total_CaptionLbl)
                        {
                        }
                        column(TempSalesCrMemoLine__Amount_Including_VAT____TempSalesCrMemoLine_AmountCaption; TempSalesCrMemoLine__Amount_Including_VAT____TempSalesCrMemoLine_AmountCaptionLbl)
                        {
                        }
                        column(Amount_in_words_Caption; Amount_in_words_CaptionLbl)
                        {
                        }

                        trigger OnAfterGetRecord()
                        begin
                            OnLineNumber := OnLineNumber + 1;
                            with TempSalesCrMemoLine do begin
                                if OnLineNumber = 1 then
                                    Find('-')
                                else
                                    Next;

                                if Type = 0 then begin
                                    "No." := '';
                                    "Unit of Measure" := '';
                                    Amount := 0;
                                    "Amount Including VAT" := 0;
                                    "Inv. Discount Amount" := 0;
                                    Quantity := 0;
                                end else
                                    if Type = Type::"G/L Account" then
                                        "No." := '';

                                if Amount <> "Amount Including VAT" then
                                    TaxLiable := Amount
                                else
                                    TaxLiable := 0;

                                AmountExclInvDisc := Amount + "Inv. Discount Amount";

                                if Quantity = 0 then
                                    UnitPriceToPrint := 0 // so it won't print
                                else
                                    UnitPriceToPrint := Round(AmountExclInvDisc / Quantity, 0.00001);

                                TotalAmountIncludingVAT += "Amount Including VAT";
                            end;

                            if OnLineNumber = NumberOfLines then
                                ConvertAmounttoWords(TotalAmountIncludingVAT);
                        end;

                        trigger OnPreDataItem()
                        begin
                            //CurrReport.CreateTotals(TaxLiable, AmountExclInvDisc, TempSalesCrMemoLine.Amount, TempSalesCrMemoLine."Amount Including VAT");
                            NumberOfLines := TempSalesCrMemoLine.Count;
                            SetRange(Number, 1, NumberOfLines);
                            OnLineNumber := 0;
                            TotalAmountIncludingVAT := 0;
                        end;
                    }
                    dataitem(OriginalStringLoop; "Integer")
                    {
                        DataItemTableView = SORTING(Number);
                        column(OriginalStringText; OriginalStringText)
                        {
                        }
                        column(OriginalStringLoop_Number; Number)
                        {
                        }
                        column(Original_StringCaption; Original_StringCaptionLbl)
                        {
                        }

                        trigger OnAfterGetRecord()
                        var
                            ReturnLength: Integer;
                        begin
                            OriginalStringText := '';
                            ReturnLength := OriginalStringBigText.GetSubText(OriginalStringText, Position, MaxStrLen(OriginalStringText));
                            Position := Position + ReturnLength;
                        end;

                        trigger OnPreDataItem()
                        begin
                            SetRange(Number, 1, Round(OriginalStringBigText.Length / MaxStrLen(OriginalStringText), 1, '>'));
                            Position := 1;
                        end;
                    }
                    dataitem(DigitalSignaturePACLoop; "Integer")
                    {
                        DataItemTableView = SORTING(Number);
                        column(DigitalSignaturePACText; DigitalSignaturePACText)
                        {
                        }
                        column(DigitalSignaturePACLoop_Number; Number)
                        {
                        }
                        column(Digital_StampCaption; Digital_StampCaptionLbl)
                        {
                        }

                        trigger OnAfterGetRecord()
                        var
                            ReturnLength: Integer;
                        begin
                            DigitalSignaturePACText := '';
                            ReturnLength := DigitalSignaturePACBigText.GetSubText(DigitalSignaturePACText, Position, MaxStrLen(DigitalSignaturePACText));
                            Position := Position + ReturnLength;
                        end;

                        trigger OnPreDataItem()
                        begin
                            SetRange(Number, 1, Round(DigitalSignaturePACBigText.Length / MaxStrLen(DigitalSignaturePACText), 1, '>'));
                            Position := 1;
                        end;
                    }
                    dataitem(DigitalSignatureLoop; "Integer")
                    {
                        DataItemTableView = SORTING(Number);
                        column(DigitalSignatureText; DigitalSignatureText)
                        {
                        }
                        column(DigitalSignatureLoop_Number; Number)
                        {
                        }
                        column(Digital_stampCaption_Control1020008; Digital_stampCaption_Control1020008Lbl)
                        {
                        }

                        trigger OnAfterGetRecord()
                        var
                            ReturnLength: Integer;
                        begin
                            DigitalSignatureText := '';
                            ReturnLength := DigitalSignatureBigText.GetSubText(DigitalSignatureText, Position, MaxStrLen(DigitalSignatureText));
                            Position := Position + ReturnLength;
                        end;

                        trigger OnPreDataItem()
                        begin
                            SetRange(Number, 1, Round(DigitalSignatureBigText.Length / MaxStrLen(DigitalSignatureText), 1, '>'));
                            Position := 1;
                        end;
                    }
                    dataitem(QRCode; "Integer")
                    {
                        DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));
                        column(Sales_Cr_Memo_Header___QR_Code_; "Sales Cr.Memo Header"."QR Code")
                        {
                        }
                        column(QRCode_Number; Number)
                        {
                        }

                        trigger OnAfterGetRecord()
                        begin
                            "Sales Cr.Memo Header".CalcFields("QR Code");
                        end;
                    }
                }

                trigger OnAfterGetRecord()
                begin
                    //CurrReport.PageNo := 1;

                    if CopyNo = NoLoops then begin
                        if not CurrReport.Preview then
                            SalesCrMemoPrinted.Run("Sales Cr.Memo Header");
                        CurrReport.Break;
                    end;
                    CopyNo := CopyNo + 1;
                    if CopyNo = 1 then // Original
                        Clear(CopyTxt)
                    else
                        CopyTxt := Text000;
                end;

                trigger OnPreDataItem()
                begin
                    NoLoops := 1 + Abs(NoCopies);
                    if NoLoops <= 0 then
                        NoLoops := 1;
                    CopyNo := 0;
                end;
            }

            trigger OnAfterGetRecord()
            var
                TempBlob: Record TempBlobExten;
                SATUtilities: Codeunit "SAT UtilitiesExten";
                VendedorComprador: Record "Salesperson/Purchaser";


            begin

                ///// Adicion CFDI a la Nota de Credito YSS.
                PBACFDI := 'N/A';
                if "Sales Cr.Memo Header"."Applies-to Doc. Type" = "Sales Cr.Memo Header"."Applies-to Doc. Type"::Invoice then begin
                    PBANoFactura := "Sales Cr.Memo Header"."Applies-to Doc. No.";
                    PBASalesInvoiceHeader.SetRange("No.", PBANoFactura);
                    if PBASalesInvoiceHeader.FindFirst() then begin
                        PBACFDI := "Sales Cr.Memo Header"."Fiscal Invoice Number PAC";

                    end;
                end;


                // busca el Folio y La serie
                NoFolio := DelChr("Sales Cr.Memo Header"."No.", '=', 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ-');
                Serie := DelChr("Sales Cr.Memo Header"."No.", '=', '0123456789-');



                if "Source Code" = SourceCodeSetup."Deleted Document" then
                    Error(Text010);

                if PrintCompany then
                    if RespCenter.Get("Responsibility Center") then begin
                        FormatAddress.RespCenter(CompanyAddress, RespCenter);
                        CompanyInformation."Phone No." := RespCenter."Phone No.";
                        CompanyInformation."Fax No." := RespCenter."Fax No.";
                    end;
                CurrReport.Language := 2058;         //Language.GetLanguageID("Language Code");

                if "Salesperson Code" = '' then
                    Clear(SalesPurchPerson)
                else
                    SalesPurchPerson.Get("Salesperson Code");

                if not Customer.Get("Bill-to Customer No.") then begin
                    Clear(Customer);
                    "Bill-to Name" := Text009;
                    "Ship-to Name" := Text009;
                end;

                FormatAddress.SalesCrMemoBillTo(BillToAddress, "Sales Cr.Memo Header");
                FormatAddress.SalesCrMemoShipTo(ShipToAddress, ShipToAddress, "Sales Cr.Memo Header");

                if LogInteraction then
                    if not CurrReport.Preview then
                        SegManagement.LogDocument(
                          6, "No.", 0, 0, DATABASE::Customer, "Sell-to Customer No.", "Salesperson Code",
                          "Campaign No.", "Posting Description", '');
                "Sales Cr.Memo Header".CalcFields("Original String", "Digital Stamp SAT", "Digital Stamp PAC");
                Clear(OriginalStringBigText);
                TempBlob.Blob := "Sales Cr.Memo Header"."Original String";
                BlobMgt.Read(OriginalStringBigText, TempBlob);
                Clear(DigitalSignatureBigText);
                TempBlob.Blob := "Sales Cr.Memo Header"."Digital Stamp SAT";
                BlobMgt.Read(DigitalSignatureBigText, TempBlob);
                Clear(DigitalSignaturePACBigText);
                TempBlob.Blob := "Sales Cr.Memo Header"."Digital Stamp PAC";
                BlobMgt.Read(DigitalSignaturePACBigText, TempBlob);

                SATPaymentMethod := SATUtilities.GetSATPaymentMethodDescription("Payment Method Code"); // MetodoPago
                SATPaymentTerm := SATUtilities.GetSATPaymentTermDescription("Payment Terms Code"); // FormaPago


                "Sales Cr.Memo Header".Reset();
                "Sales Cr.Memo Header".SetRange("No.", "No.");
                if "Sales Cr.Memo Header".FindFirst() then begin
                    if "Sales Cr.Memo Header"."Currency Code" = '' then begin
                        Divisa := 'MXN';
                        TCambio := 1;
                    end else begin
                        Divisa := "Sales Cr.Memo Header"."Currency Code";
                        TCambio := 1 / "Sales Cr.Memo Header"."Currency Factor";
                    end;


                    VendedorComprador.SetRange(Code, "Sales Cr.Memo Header"."Salesperson Code");
                    if VendedorComprador.FindFirst() then begin
                        NombreVendedor := VendedorComprador.Name;
                    end;

                end;
                SATUseCode.SetRange("SAT Use Code", Customer."CFDI Purpose");
                if SATUseCode.FindFirst() then begin
                    UsoCFDI := (SATUseCode."SAT Use Code" + ' - ' + SATUseCode.Description);
                    ////++++++++
                end;



            end;
        }
    }

    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoCopies; NoCopies)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Number of Copies';
                        ToolTip = 'Specifies the number of copies to print of the document.';
                    }
                    field(PrintCompany; PrintCompany)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Company Address';
                        ToolTip = 'Specifies if the printed document includes your company address.';
                        Visible = false;
                    }
                    field(LogInteraction; LogInteraction)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Log Interaction';
                        Enabled = LogInteractionEnable;
                        ToolTip = 'Specifies that interactions with contact persons in connection with the report are logged.';
                    }
                }
            }
        }

        actions
        {
        }

        trigger OnInit()
        begin
            LogInteractionEnable := true;
        end;

        trigger OnOpenPage()
        begin
            LogInteraction := SegManagement.FindInteractTmplCode(6) <> '';
            LogInteractionEnable := LogInteraction;
        end;
    }

    labels
    {
    }

    trigger OnPreReport()
    var
        SATUtilities: Codeunit "SAT UtilitiesExten";
    begin
        CompanyInformation.Get;
        SalesSetup.Get;
        SourceCodeSetup.Get;
        PrintCompany := true;

        case SalesSetup."Logo Position on Documents" of
            SalesSetup."Logo Position on Documents"::"No Logo":
                ;
            SalesSetup."Logo Position on Documents"::Left:
                CompanyInformation.CalcFields(Picture);
            SalesSetup."Logo Position on Documents"::Center:
                begin
                    CompanyInfo1.Get;
                    CompanyInfo1.CalcFields(Picture);
                end;
            SalesSetup."Logo Position on Documents"::Right:
                begin
                    CompanyInfo2.Get;
                    CompanyInfo2.CalcFields(Picture);
                end;
        end;

        if PrintCompany then
            FormatAddress.Company(CompanyAddress, CompanyInformation)
        else
            Clear(CompanyAddress);

        SATTaxRegimeClassification := SATUtilities.GetSATTaxSchemeDescription(CompanyInformation."SAT Tax Regime Classification");
    end;

    var
        SATUseCode: Record "SAT Use Code";
        UsoCFDI: Text[100];
        PBASalesInvoiceHeader: Record "Sales Invoice Header";
        PBANoFactura: Code[20];
        PBACFDI: Text[50];
        NombreVendedor: Text[50];
        TCambio: Decimal;
        Divisa: Code[10];

        TaxLiable: Decimal;
        UnitPriceToPrint: Decimal;
        AmountExclInvDisc: Decimal;
        TotalAmountIncludingVAT: Decimal;
        SalesPurchPerson: Record "Salesperson/Purchaser";
        CompanyInformation: Record "Company Information";
        CompanyInfo1: Record "Company Information";
        CompanyInfo2: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        TempSalesCrMemoLine: Record "Sales Cr.Memo Line" temporary;
        RespCenter: Record "Responsibility Center";
        Language: Codeunit Language;
        Customer: Record Customer;
        SourceCodeSetup: Record "Source Code Setup";
        CompanyAddress: array[8] of Text[50];
        BillToAddress: array[8] of Text[50];
        ShipToAddress: array[8] of Text[50];
        CopyTxt: Text[10];
        PrintCompany: Boolean;
        NoCopies: Integer;
        NoLoops: Integer;
        CopyNo: Integer;
        NumberOfLines: Integer;
        OnLineNumber: Integer;
        HighestLineNo: Integer;
        SpacePointer: Integer;
        SalesCrMemoPrinted: Codeunit "Sales Cr. Memo-Printed";
        FormatAddress: Codeunit "Format Address";
        SegManagement: Codeunit SegManagement;
        LogInteraction: Boolean;
        BlobMgt: Codeunit BlobManagementExten;
        Text000: Label 'COPY';
        Text001: Label 'Transferred from page %1';
        Text002: Label 'Transferred to page %1';
        Position: Integer;
        Text009: Label 'VOID CREDIT MEMO';
        AmountInWords: array[2] of Text[80];
        OriginalStringText: Text[160];
        DigitalSignatureText: Text[150];
        DigitalSignaturePACText: Text[70];
        OriginalStringBigText: BigText;
        DigitalSignatureBigText: BigText;
        Text010: Label 'You can not sign or send or print a deleted document.';
        DigitalSignaturePACBigText: BigText;
        Text011: Label '%1, %2';
        [InDataSet]
        LogInteractionEnable: Boolean;
        CreditCaptionLbl: Label 'Credit-To:';
        Ship_DateCaptionLbl: Label 'Ship Date';
        Apply_to_TypeCaptionLbl: Label 'Apply to Type';
        Apply_to_NumberCaptionLbl: Label 'Apply to Number';
        Customer_IDCaptionLbl: Label 'Customer ID';
        P_O__NumberCaptionLbl: Label 'P.O. Number';
        SalesPersonCaptionLbl: Label 'SalesPerson';
        ShipCaptionLbl: Label 'Ship-To:';
        CREDIT_MEMOCaptionLbl: Label 'CREDIT MEMO';
        Page_CaptionLbl: Label 'Page:';
        CompanyInformation__RFC_No__CaptionLbl: Label 'Company RFC';
        Sales_Cr_Memo_Header___Certificate_Serial_No__CaptionLbl: Label 'Certificate Serial No.';
        FolioTextCaptionLbl: Label 'Folio:';
        NoSeriesLine__Authorization_Code_CaptionLbl: Label 'Date and time of certification:';
        NoSeriesLine__Authorization_Year_CaptionLbl: Label 'Location and Issue date:';
        Customer__RFC_No__CaptionLbl: Label 'Customer RFC';
        Customer__Phone_No__CaptionLbl: Label 'Phone number';
        Item_No_CaptionLbl: Label 'Código';
        UnitCaptionLbl: Label 'Unidad';
        DescriptionCaptionLbl: Label 'Descripción';
        QuantityCaptionLbl: Label 'Cantidad';
        Unit_PriceCaptionLbl: Label 'P/U';
        Total_PriceCaptionLbl: Label 'Importe';
        Subtotal_CaptionLbl: Label 'Subtotal:';
        Invoice_Discount_CaptionLbl: Label 'Especial:';
        Total_CaptionLbl: Label 'Total:';
        TempSalesCrMemoLine__Amount_Including_VAT____TempSalesCrMemoLine_AmountCaptionLbl: Label 'IVA';
        Amount_in_words_CaptionLbl: Label 'Amount in words:';
        Original_StringCaptionLbl: Label 'Cadena original del complemento de certificación digital del SAT: ';
        Digital_StampCaptionLbl: Label 'Sello digital del SAT:';
        Digital_stampCaption_Control1020008Lbl: Label 'Sello digital del CFDI:';
        DocumentFooterLbl: Label '"Este documento es una representación impresa de un CFDI"';
        TaxRegimeLbl: Label 'Regimen Fiscal:';
        SATPaymentMethod: Text[50];
        SATPaymentTerm: Text[50];
        SATTaxRegimeClassification: Text[100];
        NoFolio: Code[20];
        Serie: Code[20];

    procedure ConvertAmounttoWords(AmountLoc: Decimal)
    var
        TranslationManagement: Report "Check Translation Management";
        LanguageId: Integer;
    begin
        if CurrReport.Language in [1033, 3084, 2058, 4105] then
            LanguageId := CurrReport.Language
        else
            LanguageId := GlobalLanguage;
        TranslationManagement.FormatNoText(AmountInWords, AmountLoc,
          LanguageId, "Sales Cr.Memo Header"."Currency Code");
    end;
}
report 50106 CotizaciónHorizontal
{
    DefaultLayout = RDLC;
    RDLCLayout = './CotizaciónHorizontal.rdl';
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;

    dataset
    {
        dataitem("Sales Header"; "Sales Header")
        {
            column(No_; "No.")
            {
            }
            column(Bill_to_Customer_No_; "Bill-to Customer No.")
            {
            }

            column(divisa; divisa)
            {
            }
            column(VAT_Registration_No_; "VAT Registration No.")
            {
            }
            column(Bill_to_Post_Code; "Bill-to Post Code")
            {
            }

            column(Bill_to_Name; "Bill-to Name")
            {
            }
            column(CompanyInfoPic; CompanyInfo.Picture)

            {
            }
            column(NombreVendedor; NombreVendedor)
            {
            }
            column(PhoneNo; PhoneNo)
            {
            }
            column(Correo; Correo)
            {
            }
            column(Document_Date; "Document Date")
            {
            }
            column(addres1; CompanyInfo.Address)
            {

            }
            column(address2; CompanyInfo."Address 2")
            {

            }
            column(cyty; CompanyInfo.City)
            {
            }
            column(CodPais; CompanyInfo."Country/Region Code")
            {
            }
            column(CP; CompanyInfo."Post Code")
            {
            }
            column(PhoneCompany; CompanyInfo."Phone No.")
            {
            }
            column(Amount; Amount)
            {
            }
            column(AmountIncludingVATHeader; "Amount Including VAT")
            {
            }
            column(Email; CompanyInfo."E-Mail")
            {
            }
            dataitem("Sales Line"; "Sales Line")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = SORTING("Document Type", "No.", "Line No.") where("Document Type" = const(Quote));

                column(Item_No; "No.")
                {
                }
                column(Description; Description)
                {
                }
                column(Quantity; Quantity)
                {
                }
                column(Unit_PriceVAT; ("Unit Price") * (1.16))
                {
                }
                column(AmountLinea; Quantity * ("Unit Price" * 1.16))
                { }
                column(Amount_Including_VAT; "Amount Including VAT")
                {
                }
                column(medidas; medidas)
                {
                }
                column(Iva; Iva)
                { }
                column(TotalDescuentos; TotalDescuentos)
                {
                }
                dataitem(itemPic; item)
                {
                    DataItemLinkReference = "Sales Line";
                    DataItemLink = "No." = field("No.");

                    column(itemPicture; picture)
                    {
                    }
                    trigger OnAfterGetRecord()
                    var
                        MapeoValorAtributo: Record "Item Attribute Value Mapping";
                        ValorAtributoProducto: Record "Item Attribute Value";
                    begin
                        Ancho := '';
                        Largo := '';
                        Alto := '';
                        medidas := '';
                        MapeoValorAtributo.SetRange("Table ID", 27);
                        MapeoValorAtributo.SetRange("No.", "No.");
                        if MapeoValorAtributo.FindSet() then begin
                            repeat

                                ValorAtributoProducto.Reset();
                                ValorAtributoProducto.SetRange("Attribute ID", MapeoValorAtributo."Item Attribute ID");
                                ValorAtributoProducto.SetRange(ID, MapeoValorAtributo."Item Attribute Value ID");
                                if ValorAtributoProducto.FindFirst() then begin
                                    //valores  id 

                                    //ancho 
                                    if ValorAtributoProducto."Attribute ID" = 16 then begin
                                        Ancho := ValorAtributoProducto.Value;
                                    end;

                                    //largo
                                    if ValorAtributoProducto."Attribute ID" = 15 then begin
                                        Largo := ValorAtributoProducto.Value;
                                    end;
                                    //Alto Asiento
                                    if ValorAtributoProducto."Attribute ID" = 14 then begin
                                        AltoAsiento := ValorAtributoProducto.Value;
                                    end;

                                    //alto
                                    if ValorAtributoProducto."Attribute ID" = 13 then begin
                                        Alto := ValorAtributoProducto.Value;
                                    end;

                                end;

                            until MapeoValorAtributo.Next() = 0;

                            if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x ' + Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;

                            if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x ' + Ancho + ' " " x ' + AltoAsiento;
                            end;

                            if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := Largo + ' x ' + Ancho + ' " " " " ';
                            end;

                            if ((Largo <> '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x  " "' + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x " "' + ' x  " "' + ' x ' + AltoAsiento;
                            end;
                            if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := Largo;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := '" " x ' + Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := '" " x ' + Ancho + ' x " "' + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := '" " x ' + Ancho;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := '" " x " "' + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := '" " x  " "' + ' x ' + Alto;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := '" " x ' + Ancho + ' x ' + Alto;
                            end;
                            if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := Largo + ' x ' + Ancho + ' x ' + Alto;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := '" " x " " x " " x ' + AltoAsiento;
                            end;

                        end;
                    end;
                }
            }
            trigger OnAfterGetRecord()
            var
                SalesHeader: Record "Sales Header";
                VendedorComprador: Record "Salesperson/Purchaser";
                salesline: Record "Sales Line";
            begin
                SalesHeader.SetRange("No.", "No.");
                if SalesHeader.FindFirst() then begin
                    Iva := ("Amount Including VAT" - Amount);
                    if SalesHeader."Currency Code" = '' then begin
                        divisa := 'MXN';
                    end
                    else begin
                        divisa := "Sales Header"."Currency Code";
                    end;

                    VendedorComprador.SetRange(Code, SalesHeader."Salesperson Code");
                    if VendedorComprador.FindFirst() then begin
                        NombreVendedor := VendedorComprador.Name;
                        PhoneNo := VendedorComprador."Phone No.";
                        Correo := VendedorComprador."E-Mail";
                    end;
                    ///////////////// averigua los descuentos
                    SDescuento := 0;
                    SumInvDisc := 0;
                    salesline.SetRange("Document Type", salesline."Document Type"::Quote);
                    salesline.SetRange("Document No.", "No.");

                    if salesline.FindFirst() then begin
                        repeat
                            SDescuento := SDescuento + salesline."Line Discount Amount";
                            SumInvDisc := SumInvDisc + salesline."Inv. Discount Amount";
                        until salesline.Next() = 0;
                        TotalDescuentos := SumInvDisc + SDescuento;
                    end;
                    ///////////// termina busqueda de  descuentos. 
                end;

            end;
        }
    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }
    }
    trigger OnPreReport()
    var
    //myInt: Integer;
    begin
        CompanyInfo.Get();
        CompanyInfo.CalcFields(Picture);
    end;

    var
        CompanyInfo: Record "Company Information";
        //Pertenece: Integer;
        NombreVendedor: Text[50];
        PhoneNo: Text[30];
        Correo: Text[80];
        divisa: Code[10];
        Ancho: Text[250];
        Largo: Text[250];
        Alto: Text[250];
        AltoAsiento: Text[250];
        medidas: Text[750];
        SDescuento: Decimal;
        SumInvDisc: Decimal;
        TotalDescuentos: Decimal;
        Iva: Decimal;

}
report 50107 "Lista de Cotización"
{
    DefaultLayout = RDLC;
    RDLCLayout = './ListadeCotización.rdl';
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;

    dataset
    {
        dataitem("Sales Header"; "Sales Header")
        {
            column(No_; "No.")
            {
            }
            column(Bill_to_Customer_No_; "Bill-to Customer No.")
            {
            }
            column(divisa; divisa)
            {
            }
            column(VAT_Registration_No_; "VAT Registration No.")
            {
            }
            column(Bill_to_Post_Code; "Bill-to Post Code")
            {
            }

            column(Bill_to_Name; "Bill-to Name")
            {
            }
            column(CompanyInfoPic; CompanyInfo.Picture)
            {
            }
            column(NombreVendedor; NombreVendedor)
            {
            }
            column(PhoneNo; PhoneNo)
            {
            }
            column(Correo; Correo)
            {
            }
            column(Document_Date; "Document Date")
            {
            }
            column(addres1; CompanyInfo.Address)
            {
            }
            column(address2; CompanyInfo."Address 2")
            {
            }
            column(cyty; CompanyInfo.City)
            {
            }
            column(CodPais; CompanyInfo."Country/Region Code")
            {
            }
            column(CP; CompanyInfo."Post Code")
            {
            }
            column(PhoneCompany; CompanyInfo."Phone No.")
            {
            }
            column(Email; CompanyInfo."E-Mail")
            {

            }
            column(Amount; Amount)
            {
            }
            column(AmountIncludingVATHeader; "Amount Including VAT")
            {
            }
            dataitem("Sales Line"; "Sales Line")
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = SORTING("Document Type", "No.", "Line No.") where("Document Type" = const(Quote));

                column(Item_No; "No.")
                {
                }
                column(Description; Description)
                {
                }
                column(Quantity; Quantity)
                {
                }
                column(Unit_Price; "Unit Price" * 1.16)
                {
                }
                column(Amount_Including_VAT; Quantity * ("Unit Price" * 1.16))
                {
                }

                column(Iva; Iva)
                {
                }
                column(Line_Discount_Amount; "Line Discount Amount")
                {
                }
                column(SDescuento; SDescuento)
                {
                }
                column(SumInvDisc; SumInvDisc)
                {
                }
                column(TotalDescuentos; TotalDescuentos)
                {
                }
                column(medidas; medidas)
                {
                }
                dataitem(itemPic; item)
                {
                    DataItemLinkReference = "Sales Line";
                    DataItemLink = "No." = field("No.");

                    column(itemPicture; picture)
                    {
                    }
                    trigger OnAfterGetRecord()
                    var
                        MapeoValorAtributo: Record "Item Attribute Value Mapping";
                        ValorAtributoProducto: Record "Item Attribute Value";
                    begin
                        Ancho := '';
                        Largo := '';
                        Alto := '';
                        medidas := '';
                        MapeoValorAtributo.SetRange("Table ID", 27);
                        MapeoValorAtributo.SetRange("No.", "No.");
                        if MapeoValorAtributo.FindSet() then begin
                            repeat

                                ValorAtributoProducto.Reset();
                                ValorAtributoProducto.SetRange("Attribute ID", MapeoValorAtributo."Item Attribute ID");
                                ValorAtributoProducto.SetRange(ID, MapeoValorAtributo."Item Attribute Value ID");
                                if ValorAtributoProducto.FindFirst() then begin
                                    //valores  id 

                                    //ancho 
                                    if ValorAtributoProducto."Attribute ID" = 16 then begin
                                        Ancho := ValorAtributoProducto.Value;
                                    end;

                                    //largo
                                    if ValorAtributoProducto."Attribute ID" = 15 then begin
                                        Largo := ValorAtributoProducto.Value;
                                    end;

                                    //Alto Asiento
                                    if ValorAtributoProducto."Attribute ID" = 14 then begin
                                        AltoAsiento := ValorAtributoProducto.Value;
                                    end;
                                    //alto
                                    if ValorAtributoProducto."Attribute ID" = 13 then begin
                                        Alto := ValorAtributoProducto.Value;
                                    end;
                                end;

                            until MapeoValorAtributo.Next() = 0;

                            if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x ' + Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;

                            if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x ' + Ancho + ' " " x ' + AltoAsiento;
                            end;

                            if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := Largo + ' x ' + Ancho + ' " " " " ';
                            end;

                            if ((Largo <> '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x  " "' + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x " "' + ' x  " "' + ' x ' + AltoAsiento;
                            end;
                            if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := Largo;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := '" " x ' + Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := '" " x ' + Ancho + ' x " "' + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := '" " x ' + Ancho;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := '" " x " "' + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := '" " x  " "' + ' x ' + Alto;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := '" " x ' + Ancho + ' x ' + Alto;
                            end;
                            if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := Largo + ' x ' + Ancho + ' x ' + Alto;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := '" " x " " x " " x ' + AltoAsiento;
                            end;

                        end;

                    end;
                }
                trigger OnAfterGetRecord()
                var


                begin


                end;
            }
            trigger OnAfterGetRecord()
            var
                SalesHeader: Record "Sales Header";
                VendedorComprador: Record "Salesperson/Purchaser";
                salesline: Record "Sales Line";
            begin
                Iva := 0;
                SalesHeader.SetRange("No.", "No.");
                if SalesHeader.FindFirst() then begin


                    Iva := ("Amount Including VAT" - Amount);
                    if SalesHeader."Currency Code" = '' then begin
                        divisa := 'MXN';
                    end
                    else begin
                        divisa := "Sales Header"."Currency Code";
                    end;


                    VendedorComprador.SetRange(Code, SalesHeader."Salesperson Code");
                    if VendedorComprador.FindFirst() then begin
                        NombreVendedor := VendedorComprador.Name;
                        PhoneNo := VendedorComprador."Phone No.";
                        Correo := VendedorComprador."E-Mail";
                    end;

                end;
                ///////////////// averigua los descuentos
                SDescuento := 0;
                SumInvDisc := 0;
                salesline.SetRange("Document Type", salesline."Document Type"::Quote);
                salesline.SetRange("Document No.", "No.");

                if salesline.FindFirst() then begin
                    repeat
                        SDescuento := SDescuento + salesline."Line Discount Amount";
                        SumInvDisc := SumInvDisc + salesline."Inv. Discount Amount";

                    until salesline.Next() = 0;
                    TotalDescuentos := SumInvDisc + SDescuento;
                end;
                ///////////// termina busqueda de  descuentos. 

            end;
        }
    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }
    }
    trigger OnPreReport()
    var
    //myInt: Integer;
    begin
        CompanyInfo.Get();
        CompanyInfo.CalcFields(Picture);
    end;

    var
        CompanyInfo: Record "Company Information";
        //Pertenece: Integer;
        NombreVendedor: Text[50];
        PhoneNo: Text[30];
        Correo: Text[80];
        divisa: Code[10];
        Ancho: Text[250];
        Largo: Text[250];
        Alto: Text[250];
        AltoAsiento: Text[250];
        Iva: Decimal;
        medidas: Text[750];
        SDescuento: Decimal;
        SumInvDisc: Decimal;
        TotalDescuentos: Decimal;

}
report 50108 "Ticket Venta Namuh"
{
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;
    DefaultLayout = RDLC;
    RDLCLayout = 'Ticket Venta Namuh.rdl';


    dataset
    {


        dataitem("Sales Invoice Header"; "Sales Invoice Header")
        {
            column(Salesperson_Code; PBACodComprador) { }
            column(Amount; Amount) { }
            column(Amount_Including_VAT_CantidadIVA; "Amount Including VAT") { }
            column(PBAIVA; PBAIVA) { }
            column(PBAFechayHoraImpresion; PBAHoraImpresion) { }
            column(PBAAddress1; PBAAddress1) { }
            column(PBAAddress2; PBAAddress2) { }
            column(PBACity; PBACity) { }
            column(PBAProvince; PBAProvince) { }
            column(PBAZIPCode; PBAZIPCode) { }
            column(PBANoFactura; PBANoFactura) { }
            column(PBANoPizarra; PBANoPizarra) { }
            column(PBADescrpcionPizarra; PBADescrpcionPizarra) { }
            column(TotalDescuentos; TotalDescuentos) { }
            column(PBAFecha; PBAFecha) { }

            dataitem("Sales Invoice Line"; "Sales Invoice Line")
            {
                DataItemLink = "Document No." = FIELD("No.");

                column(No_; "No.") { }

                column(Description; Description) { }

                column(Quantity; Quantity) { }

                column(Unit_of_Measure_Code; "Unit of Measure Code") { }

                column(Line_Amount; "Line Amount") { }


                dataitem("Company Information"; "Company Information")
                {
                    column(Name; Name) { }
                    column(Picture; Picture) { }
                    column(RFC_No_; "RFC No.") { }
                    column(Address_2; "Address 2")
                    {

                    }

                    ////// Disparador Informacion Compañia
                    trigger OnAfterGetRecord()
                    begin
                        "Company Information".Get();
                        "Company Information".CalcFields(Picture);

                    end;
                }
                ////// Disparador Line
                trigger OnAfterGetRecord()


                begin
                    //"Sales Invoice Line".SetRange("Document No.", PBADocumentNo);
                    //PBASubtotalLine := "Sales Invoice Line".


                end;
            }
            ////// Disparador Header

            trigger OnAfterGetRecord()

            begin
                PBACodComprador := "Sales Invoice Header"."Salesperson Code";
                PBADocumentNo := "Sales Invoice Header"."No.";
                CalcFields(Amount);
                CalcFields("Amount Including VAT");
                PBAIVA := ("Amount Including VAT" - Amount);
                PBAHoraImpresion := CurrentDateTime();
                PBANoFactura := "Sales Invoice Header"."No.";
                PBANoPizarra := "Sales Invoice Header"."N° Pizarra";
                PBAFecha := CurrentDateTime();

                PBATablaPizarra.SetRange(CodigoP, PBANoPizarra);
                if PBATablaPizarra.FindFirst() then begin

                    PBADescrpcionPizarra := PBATablaPizarra."Descripción";

                end;


                ///////////////// averigua los descuentos
                SDescuento := 0;
                SumInvDisc := 0;
                //SalesInvLine.SetRange("Document Type", salesline."Document Type"::Order);
                SalesInvLine.SetRange("Document No.", "No.");

                if SalesInvLine.FindFirst() then begin
                    repeat
                        SDescuento := SDescuento + SalesInvLine."Line Discount Amount";
                        SumInvDisc := SumInvDisc + SalesInvLine."Inv. Discount Amount";



                    until SalesInvLine.Next() = 0;
                    TotalDescuentos := SumInvDisc + SDescuento;

                end;
                ///////////// termina busqueda de  descuentos.


                PBALocations.SetRange(Code, "Sales Invoice Header"."Location Code");
                if PBALocations.FindFirst() then begin
                    PBAAddress1 := PBALocations.Address;
                    PBAAddress2 := PBALocations."Address 2";
                    PBACity := PBALocations.City;
                    PBAProvince := PBALocations.County;
                    PBAZIPCode := PBALocations."Post Code";
                end;
            end;

        }


    }




    var
        PBACompanyInfo: Record "Company Information";
        PBAHeder: Record "Sales Invoice Header";
        PBADocumentNo: Code[20];
        PBACodComprador: Code[20];

        PBASubtotalLine: Decimal;
        PBAIVA: Decimal;
        PBAHoraImpresion: DateTime;

        PBALocations: Record Location;
        PBAAddress1: Code[100];
        PBAAddress2: Code[100];
        PBACity: Code[50];
        PBAProvince: Code[50];
        PBAZIPCode: Code[50];
        PBANoFactura: Code[25];
        PBANoPizarra: Code[20];
        SDescuento: Decimal;
        SumInvDisc: Decimal;
        SalesInvLine: Record "Sales Invoice Line";

        TotalDescuentos: Decimal;
        PBADescrpcionPizarra: Text[100];

        PBATablaPizarra: Record Pizarra;
        PBAFecha: DateTime;


}
report 50109 "PBA Reporte Pedido Compra"
{
    DefaultLayout = RDLC;
    RDLCLayout = 'PBA Report Pedido Compra.rdl';

    dataset
    {
        dataitem("Purchase Header"; "Purchase Header")
        {
            column(PBANumeroPedidoCompra; "No.") { } // 3
            column(PBAFecha; PBAFecha) { } // Document Date 99
            column(PBATitulo; PBATitulo) { }
            column(Doc__No__Occurrence; "Doc. No. Occurrence") { } //5048
            column(Status; Status) { } //120
            column(PBANombreComprador; PBANombreComprador) { }// Table 13 (2)
            column(PBAEmailComprador; PBAEmailComprador) { } // Table 13 (5052)
            column(PBAProveedor; "Buy-from Vendor Name") { } //79
            column(PBADireccionProveedor; "Buy-from County") { }//89
            column(PBADirecciondeEnvio; "Ship-to Name") { } // 13
            column(PBADireccionenvio2; "Ship-to City") { } //17
            column(PBACondicionesPago; "Payment Terms Code") { } //23
            column(PBAContacto; "Buy-from Contact") { }// 84
            column(PBAMetodoEnvio; "Shipment Method Code") { }//27
            column(PBAIVA; PBAIVA) { }
            column(PBAEmailProveedor; PBAEmailProveedor) { }
            column(PBAFechaRecepcionSolicitado; "Requested Receipt Date") { } //5790
            //Requested Receipt Date

            dataitem("Purchase Line"; "Purchase Line")
            {
                DataItemLink = "Document No." = FIELD("No.");

                column(PBANoLineas; "No.") { } //6
                column(PBADescription; Description) { } // 11
                column(PBACodigoProveedor; "Cross-Reference Type No.") { } //5708
                column(PBAUnidadMedida; "Unit of Measure") { } //13
                column(PBAQuantity; Quantity) { } //15
                column(PBAPrecioUnitario; "Direct Unit Cost") { }//31
                column(PBAPrecioTotal; Amount) { } //29
                //column(PBACantidadTabla; "Amount Including VAT") { }
                column(PBACantidadSubtotal; PBACantidadSubtotal) { }

                dataitem("Company Information"; "Company Information")
                {
                    column(Name; Name) { }
                    column(Address; Address) { }
                    column(Address_2; "Address 2") { }
                    column(City; City) { }
                    column(Country_Region_Code; "Country/Region Code") { }
                    column(County; County) { }
                    column(SAT_Postal_Code; "SAT Postal Code") { }
                    column(Picture; Picture) { }

                    //Disparador Informacion de la Compañia
                    trigger OnAfterGetRecord()
                    begin
                        "Company Information".Get();
                        "Company Information".CalcFields(Picture);

                    end;
                }

                //Disparador Lineas Pedido de Compra
                trigger OnAfterGetRecord()
                var
                    myInt: Integer;
                begin

                end;
            }

            //Disparador Cabecera Pedido Compra
            trigger OnAfterGetRecord()
            begin
                CalcFields(Amount);
                CalcFields("Amount Including VAT");
                PBAIVA := ("Amount Including VAT" - Amount);
                PBACantidadSubtotal := "Amount Including VAT";
                PBAFecha := CurrentDateTime();
                PBATitulo := 'ORDEN DE COMPRA';

                PBAComprador.SetRange(Code, "Purchase Header"."Purchaser Code");
                if PBAComprador.FindFirst() then begin
                    PBANombreComprador := PBAComprador.Name;
                    PBAEmailComprador := PBAComprador."E-Mail";

                end;

                PBATablaProveedor.SetRange("No.", "Purchase Header"."Buy-from Vendor No.");
                if PBATablaProveedor.FindFirst() then begin
                    PBAEmailProveedor := PBATablaProveedor."E-Mail";

                end



            end;
        }

    }
    var
        PBAFecha: DateTime;
        PBATitulo: Code[20];
        PBAComprador: Record "Salesperson/Purchaser";
        PBANombreComprador: Code[50];
        PBAEmailComprador: Text[80];
        PBAIVA: Decimal;
        PBATablaProveedor: Record Vendor;
        PBAEmailProveedor: Code[50];
        PBAPrecioTotal: Decimal;
        PBACantidadSubtotal: Decimal;
}
report 50110 "Proceso Inventario estatico"
{
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;
    ProcessingOnly = true;


    dataset
    {
        dataitem(Item; Item)
        {

            dataitem(Location; Location)
            {
                //Disparador Dataitem := Location
                trigger OnAfterGetRecord()

                begin
                    //Codigo Por si se Requiere que la Tabla Solo Tenga
                    //Que contener Valores Nuevos Sin Almacenar Anteriores
                    //if Banderaso = false then begin
                    //  PBATablaCreada.DeleteAll();
                    //    Banderaso := true;
                    // end;


                    Item.SetFilter("Location Filter", Location.Code);
                    Item.CalcFields(Inventory);
                    PBACantidad := Item.Inventory;
                    PBAPrecioConIVA := Item."Unit Price";

                    PBATablaCountry.SetRange(Code, Item."Country/Region of Origin Code");
                    if PBATablaCountry.FindFirst() then begin
                        PBACodeCountry := PBATablaCountry.Code;
                        PBADescripcionCountry := PBATablaCountry.Name;
                    end;

                    if PBACodeCountry = '' then
                        PBACodeCountry := 'N/A';

                    if PBADescripcionCountry = '' then
                        PBADescripcionCountry := 'N/A';


                    PBATablaCreada.Init();
                    PBATablaCreada."Cod.Producto" := Item."No.";
                    PBATablaCreada.Almacen := Location.Code;
                    PBATablaCreada.Cantidad := PBACantidad;
                    PBATablaCreada."Precio Con IVA" := PBAPrecioConIVA;
                    PBATablaCreada.Fecha := Today();
                    PBATablaCreada.Hora := Time();
                    PBATablaCreada."Cod.Pais" := PBACodeCountry;
                    PBATablaCreada.Pais := PBADescripcionCountry;
                    PBATablaCreada.Insert();
                    Clear(PBATablaCreada);
                    clear(PBATablaCountry);
                    Clear(PBACodeCountry);
                    Clear(PBADescripcionCountry);

                end;
            }

            //Disparador Dataitem := Item
            trigger OnAfterGetRecord()
            begin


            end;
        }
    }

    var
        PBATablaCreada: Record "Almacen Por Producto";
        PBACantidad: Decimal;
        PBAFecha: Date;
        PBAHora: Time;
        PBANoProductoitem: Code[50];
        Banderaso: Boolean;
        PBATablaCountry: Record "Country/Region";
        PBACodeCountry: Code[10];
        PBADescripcionCountry: Text;
        PBAPrecioConIVA: Decimal;


}

report 50111 "Mix Payment"
{
    // version NAVW111.00,NAVNA11.00,NOOPERCP

    DefaultLayout = RDLC;
    RDLCLayout = './Mix Payment.rdl';
    CaptionML = ENU = 'Customer - Payment Receipt',
                ESM = 'Clientes - Recepción pago',
                FRC = 'Client - Reçu de paiement',
                ENC = 'Customer - Payment Receipt';

    dataset
    {
        dataitem("Cust. Ledger Entry"; "Cust. Ledger Entry")
        {
            DataItemTableView = SORTING("Document Type", "Customer No.", "Posting Date", "Currency Code") WHERE("Document Type" = FILTER(Payment | Refund));
            RequestFilterFields = "Customer No.", "Posting Date", "Document No.", "Entry No.";
            column(EntryNo_CustLedgEntry; "Entry No.")
            {
            }
            dataitem(PageLoop; "Integer")
            {
                DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));
                column(CustAddr6; CustAddr[6])
                {
                }
                column(CustAddr7; CustAddr[7])
                {
                }
                column(CustAddr8; CustAddr[8])
                {
                }
                column(CustAddr4; CustAddr[4])
                {
                }
                column(CustAddr5; CustAddr[5])
                {
                }
                column(CustAddr3; CustAddr[3])
                {
                }
                column(CustAddr1; CustAddr[1])
                {
                }
                column(CustAddr2; CustAddr[2])
                {
                }
                column(CustomerNo_CustLedgEntry; "Cust. Ledger Entry"."Customer No.")
                {
                    IncludeCaption = true;
                }
                column(DocDate_CustLedgEntry; FORMAT("Cust. Ledger Entry"."Document Date", 0, 4))
                {
                }
                column(CompanyAddr1; CompanyAddr[1])
                {
                }
                column(CompanyAddr2; CompanyAddr[2])
                {
                }
                column(CompanyAddr3; CompanyAddr[3])
                {
                }
                column(CompanyAddr4; CompanyAddr[4])
                {
                }
                column(CompanyAddr5; CompanyAddr[5])
                {
                }
                column(CompanyAddr6; CompanyAddr[6])
                {
                }
                column(CompanyInfoPicture; CompanyInfo.Picture)
                {
                }
                column(CompanyInfoEMail; CompanyInfo."E-Mail")
                {
                }
                column(CompanyInfoPhoneNo; CompanyInfo."Phone No.")
                {
                }
                column(CompanyInfoHomePage; CompanyInfo."Home Page")
                {
                }
                column(CompanyInfoVATRegNo; CompanyInfo."VAT Registration No.")
                {
                }
                column(direccion1; CompanyInfo.Address)
                {
                }
                column(direccion2; CompanyInfo."Address 2")
                {
                }
                column(Municipio; CompanyInfo.City)
                {
                }
                column(CodPais; CompanyInfo."Country/Region Code")
                {
                }
                column(CP; CompanyInfo."Post Code")
                {
                }

                column(CompanyInfoGiroNo; CompanyInfo."Giro No.")
                {
                }
                column(CompanyInfoBankName; CompanyInfo."Bank Name")
                {
                }
                column(CompanyInfoBankAccountNo; CompanyInfo."Bank Account No.")
                {
                }
                column(RegimenFiscal; CompanyInfo."SAT Tax Regime Classification")
                {
                }
                column(ReportTitle; ReportTitle)
                {
                }
                column(DocumentNo_CustLedgEntry; "Cust. Ledger Entry"."Document No.")
                {
                }
                column(PaymentDiscountTitle; PaymentDiscountTitle)
                {
                }
                column(CompanyInfoPhoneNoCaption; CompanyInfoPhoneNoCaptionLbl)
                {
                }
                column(CompanyInfoGiroNoCaption; CompanyInfoGiroNoCaptionLbl)
                {
                }
                column(CompanyInfoBankNameCptn; CompanyInfoBankNameCptnLbl)
                {
                }
                column(CompanyInfoBankAccNoCptn; CompanyInfoBankAccNoCptnLbl)
                {
                }
                column(ReceiptNoCaption; ReceiptNoCaptionLbl)
                {
                }
                column(CompanyInfoVATRegNoCptn; CompanyInfoVATRegNoCptnLbl)
                {
                }
                column(CustLedgEntry1PostDtCptn; CustLedgEntry1PostDtCptnLbl)
                {
                }
                column(AmountCaption; AmountCaptionLbl)
                {
                }
                column(PaymAmtSpecificationCptn; PaymAmtSpecificationCptnLbl)
                {
                }
                column(PmtTolInvCurrCaption; PmtTolInvCurrCaptionLbl)
                {
                }
                column(DocumentDateCaption; DocumentDateCaptionLbl)
                {
                }
                column(CompanyInfoEMailCaption; CompanyInfoEMailCaptionLbl)
                {
                }
                column(CompanyInfoHomePageCptn; CompanyInfoHomePageCptnLbl)
                {
                }
                column(PBACompanyName1; CompanyInfo.Name)
                {
                }
                column(PBACompanyName2; CompanyInfo."Name 2")
                {
                }
                column(PBAAdress; CompanyInfo.Address)
                {
                }
                column(PBAAdress2; CompanyInfo."Address 2")
                {
                }
                column(PBACompanyRFC; CompanyInfo."RFC No.")
                {
                }
                column(PBAFolioFiscal; "Cust. Ledger Entry"."Fiscal Invoice Number PAC")
                {
                }
                column(PBANoDocumentoFactura; "Cust. Ledger Entry"."Document No.")
                {
                }
                column(PBALugarExpedicion; CompanyInfo."Post Code")
                {
                }
                column(PBACertificadoCSD; "Cust. Ledger Entry"."Certificate Serial No.")
                {
                }
                column(PBAFechaEmision; "Cust. Ledger Entry"."Date/Time Stamped")
                {
                }
                column(PBANombrCliente; Cust.Name)
                {
                }
                column(PBAClienteFacturaRFC; Cust."RFC No.")
                {
                }
                column(PBADireccion1Cliente; Cust.Address)
                {
                }
                column(PBADireccion2Cleinte; Cust."Address 2")
                {
                }
                column(PBAFormaPago; VarFormaPago)
                {
                }
                column(PBAFechaPago; VarFechaPago)
                {
                }
                column(PBAOperacion; NoOperation)
                {
                }
                column(PBAMonedaPago; VarMonedaPago)
                {
                }
                column(PBAMontoPago; VarMontoPago)
                {
                }
                dataitem(DetailedCustLedgEntry1; "Detailed Cust. Ledg. Entry")
                {
                    DataItemLink = "Applied Cust. Ledger Entry No." = FIELD("Entry No.");
                    DataItemLinkReference = "Cust. Ledger Entry";
                    DataItemTableView = SORTING("Applied Cust. Ledger Entry No.", "Entry Type") WHERE(Unapplied = CONST(false));
                    dataitem(CustLedgEntry1; "Cust. Ledger Entry")
                    {
                        DataItemLink = "Entry No." = FIELD("Cust. Ledger Entry No.");
                        DataItemLinkReference = DetailedCustLedgEntry1;
                        DataItemTableView = SORTING("Entry No.");
                        column(PostDate_CustLedgEntry1; FORMAT("Posting Date"))
                        {
                        }
                        column(DocType_CustLedgEntry1; "Document Type")
                        {
                            IncludeCaption = true;
                        }
                        column(DocumentNo_CustLedgEntry1; "Document No.")
                        {
                            IncludeCaption = true;
                        }
                        column(Desc_CustLedgEntry1; Description)
                        {
                            IncludeCaption = true;
                        }
                        column(CurrCode_CustLedgEntry1; CurrencyCode("Currency Code"))
                        {
                        }
                        column(ShowAmount; ShowAmount)
                        {
                        }
                        column(AppliedAmountCustLedEnt1; AppliedAmount)
                        {

                        }
                        column(RemainingAmountCustLedEnt1; RemainingAmount)
                        {

                        }
                        column(PmtDiscInvCurr; PmtDiscInvCurr)
                        {
                        }
                        column(PmtTolInvCurr; PmtTolInvCurr)
                        {
                        }
                        column(CurrencyCodeCaption; FIELDCAPTION("Currency Code"))
                        {
                        }

                        trigger OnAfterGetRecord();
                        begin
                            if "Entry No." = "Cust. Ledger Entry"."Entry No." then
                                CurrReport.SKIP;

                            PmtDiscInvCurr := 0;
                            PmtTolInvCurr := 0;
                            PmtDiscPmtCurr := 0;
                            PmtTolPmtCurr := 0;


                            ShowAmount := -DetailedCustLedgEntry1.Amount;/////tinene el valor de amount correcto 

                            if "Cust. Ledger Entry"."Currency Code" <> "Currency Code" then begin
                                PmtDiscInvCurr := ROUND("Pmt. Disc. Given (LCY)" * "Original Currency Factor");
                                PmtTolInvCurr := ROUND("Pmt. Tolerance (LCY)" * "Original Currency Factor");
                                AppliedAmount :=
                                  ROUND(
                                    -DetailedCustLedgEntry1.Amount / "Original Currency Factor" *
                                    "Cust. Ledger Entry"."Original Currency Factor", Currency."Amount Rounding Precision");
                            end else begin
                                PmtDiscInvCurr := ROUND("Pmt. Disc. Given (LCY)" * "Cust. Ledger Entry"."Original Currency Factor");
                                PmtTolInvCurr := ROUND("Pmt. Tolerance (LCY)" * "Cust. Ledger Entry"."Original Currency Factor");
                                AppliedAmount := -DetailedCustLedgEntry1.Amount;  /////////////Esta parte trae el valor 
                            end;

                            PmtDiscPmtCurr := ROUND("Pmt. Disc. Given (LCY)" * "Cust. Ledger Entry"."Original Currency Factor");
                            PmtTolPmtCurr := ROUND("Pmt. Tolerance (LCY)" * "Cust. Ledger Entry"."Original Currency Factor");

                            RemainingAmount := (RemainingAmount - AppliedAmount) + PmtDiscPmtCurr + PmtTolPmtCurr;
                        end;
                    }
                }
                dataitem(DetailedCustLedgEntry2; "Detailed Cust. Ledg. Entry")
                {
                    DataItemLink = "Cust. Ledger Entry No." = FIELD("Entry No.");
                    DataItemLinkReference = "Cust. Ledger Entry";
                    DataItemTableView = SORTING("Cust. Ledger Entry No.", "Entry Type", "Posting Date") WHERE(Unapplied = CONST(false));
                    dataitem(CustLedgEntry2; "Cust. Ledger Entry")
                    {
                        DataItemLink = "Entry No." = FIELD("Applied Cust. Ledger Entry No.");
                        DataItemLinkReference = DetailedCustLedgEntry2;
                        DataItemTableView = SORTING("Entry No.");
                        column(AppliedAmount; AppliedAmount)
                        {
                        }
                        column(Desc_CustLedgEntry2; Description)
                        {
                        }
                        column(DocumentNo_CustLedgEntry2; "Document No.")
                        {
                        }
                        column(DocType_CustLedgEntry2; "Document Type")
                        {
                        }
                        column(PostDate_CustLedgEntry2; FORMAT("Posting Date"))
                        {
                        }
                        column(PmtDiscInvCurr1; PmtDiscInvCurr)
                        {
                        }
                        column(PmtTolInvCurr1; PmtTolInvCurr)
                        {
                        }

                        trigger OnAfterGetRecord();
                        begin
                            if "Entry No." = "Cust. Ledger Entry"."Entry No." then
                                CurrReport.SKIP;

                            PmtDiscInvCurr := 0;
                            PmtTolInvCurr := 0;
                            PmtDiscPmtCurr := 0;
                            PmtTolPmtCurr := 0;

                            ShowAmount := DetailedCustLedgEntry2.Amount;

                            if "Cust. Ledger Entry"."Currency Code" <> "Currency Code" then begin
                                PmtDiscInvCurr := ROUND("Pmt. Disc. Given (LCY)" * "Original Currency Factor");
                                PmtTolInvCurr := ROUND("Pmt. Tolerance (LCY)" * "Original Currency Factor");
                            end else begin
                                PmtDiscInvCurr := ROUND("Pmt. Disc. Given (LCY)" * "Cust. Ledger Entry"."Original Currency Factor");
                                PmtTolInvCurr := ROUND("Pmt. Tolerance (LCY)" * "Cust. Ledger Entry"."Original Currency Factor");
                            end;

                            PmtDiscPmtCurr := ROUND("Pmt. Disc. Given (LCY)" * "Cust. Ledger Entry"."Original Currency Factor");
                            PmtTolPmtCurr := ROUND("Pmt. Tolerance (LCY)" * "Cust. Ledger Entry"."Original Currency Factor");

                            AppliedAmount := DetailedCustLedgEntry2.Amount;
                            RemainingAmount := (RemainingAmount - AppliedAmount) + PmtDiscPmtCurr + PmtTolPmtCurr;
                        end;
                    }
                }

                dataitem(Relation; "Integer")
                {
                    DataItemTableView = SORTING(Number);
                    column(Monedadocto_ComplePago1; monedaTEMP)
                    {
                    }
                    column(FolioDocto_ComplePago1; TempCustLedgerEntry."Document No.")
                    {
                    }

                    column(PAC_UUID_salesInvoice; PAC_UUID_salesInvoice)
                    {
                    }
                    column(Numparcialidad_ComplePago1; TempCustLedgerEntry.NumParcialidad)
                    {
                    }
                    column(Importesaldoanterior_ComplePago1; TempCustLedgerEntry.ImpSaldoAnt)
                    {
                    }
                    column(Importepagado_ComplePago1; TempCustLedgerEntry.ImpPagado)
                    {
                    }
                    column(Importesaldoinsoluto_ComplePago1; TempCustLedgerEntry.ImpSaldoInsoluto)
                    {
                    }
                    column(Metodopagodocto_ComplePago1; PaymentMethodCode)
                    {
                    }
                    column(CustDocumentNo; "Cust. Ledger Entry"."Document No.")
                    {
                    }

                    trigger OnAfterGetRecord();
                    var
                        SalesInvoice: Record "Sales Invoice Header";


                    begin
                        PaymentMethodCode := 'PPD';    /////////////////////77aqui asigna metodo de pago 
                        OnLineNumber := OnLineNumber + 1;
                        with TempCustLedgerEntry do begin
                            if OnLineNumber = 1 then
                                FIND('-')
                            else
                                NEXT;
                        end;
                        if TempCustLedgerEntry."Currency Code" = '' then begin
                            monedaTEMP := 'MXN';
                        end else begin
                            monedaTEMP := TempCustLedgerEntry."Currency Code";
                        end;

                        SalesInvoice.SetRange("No.", TempCustLedgerEntry."Document No.");
                        if SalesInvoice.FindFirst() then begin
                            PAC_UUID_salesInvoice := SalesInvoice."Fiscal Invoice Number PAC";
                        end;
                    end;

                    trigger OnPreDataItem();
                    begin
                        if TempCustLedgerEntry.FINDFIRST then;
                        NumberOfLines := TempCustLedgerEntry.COUNT;
                        SETRANGE(Number, 1, NumberOfLines);
                    end;
                }
                dataitem(Total; "Integer")
                {
                    DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));
                    column(RemainingAmount; RemainingAmount)
                    {
                    }
                    column(CurrCode_CustLedgEntry; CurrencyCode("Cust. Ledger Entry"."Currency Code"))
                    {
                    }
                    column(OriginalAmt_CustLedgEntry; "Cust. Ledger Entry"."Original Amount")
                    {
                    }
                    column(ExtDocNo_CustLedgEntry; "Cust. Ledger Entry"."External Document No.")
                    {
                    }
                    column(PaymAmtNotAllocatedCptn; PaymAmtNotAllocatedCptnLbl)
                    {
                    }
                    column(CustLedgEntryOrgAmtCptn; CustLedgEntryOrgAmtCptnLbl)
                    {
                    }
                    column(ExternalDocumentNoCaption; ExternalDocumentNoCaptionLbl)
                    {
                    }
                }
                dataitem(OriginalStringLoop; "Integer")
                {
                    DataItemTableView = SORTING(Number);
                    column(OriginalStringText; OriginalStringText)
                    {
                    }
                    column(OriginalStringLoop_Number; Number)
                    {
                    }
                    column(Original_StringCaption; Original_StringCaptionLbl)
                    {
                    }

                    trigger OnAfterGetRecord();
                    var
                        ReturnLength: Integer;
                    begin
                        OriginalStringText := '';
                        ReturnLength := OriginalStringBigText.GETSUBTEXT(OriginalStringText, Position, MAXSTRLEN(OriginalStringText));
                        Position := Position + ReturnLength;
                    end;

                    trigger OnPreDataItem();
                    begin
                        SETRANGE(Number, 1, ROUND(OriginalStringBigText.LENGTH / MAXSTRLEN(OriginalStringText), 1, '>'));
                        Position := 1;
                    end;
                }
                dataitem(DigitalSignaturePACLoop; "Integer")
                {
                    DataItemTableView = SORTING(Number);
                    column(DigitalSignaturePACText; DigitalSignaturePACText)
                    {
                    }
                    column(DigitalSignaturePACLoop_Number; Number)
                    {
                    }
                    column(Digital_StampCaption; Digital_StampCaptionLbl)
                    {
                    }

                    trigger OnAfterGetRecord();
                    var
                        ReturnLength: Integer;
                    begin
                        DigitalSignaturePACText := '';
                        ReturnLength := DigitalSignaturePACBigText.GETSUBTEXT(DigitalSignaturePACText, Position, MAXSTRLEN(DigitalSignaturePACText));
                        Position := Position + ReturnLength;
                    end;

                    trigger OnPreDataItem();
                    begin
                        SETRANGE(Number, 1, ROUND(DigitalSignaturePACBigText.LENGTH / MAXSTRLEN(DigitalSignaturePACText), 1, '>'));
                        Position := 1;
                    end;
                }
                dataitem(DigitalSignatureLoop; "Integer")
                {
                    DataItemTableView = SORTING(Number);
                    column(DigitalSignatureText; DigitalSignatureText)
                    {
                    }
                    column(DigitalSignatureLoop_Number; Number)
                    {
                    }
                    column(Digital_stampCaption_Control1020008; Digital_stampCaption_Control1020008Lbl)
                    {
                    }

                    trigger OnAfterGetRecord();
                    var
                        ReturnLength: Integer;
                    begin
                        DigitalSignatureText := '';
                        ReturnLength := DigitalSignatureBigText.GETSUBTEXT(DigitalSignatureText, Position, MAXSTRLEN(DigitalSignatureText));
                        Position := Position + ReturnLength;
                    end;

                    trigger OnPreDataItem();
                    begin
                        SETRANGE(Number, 1, ROUND(DigitalSignatureBigText.LENGTH / MAXSTRLEN(DigitalSignatureText), 1, '>'));
                        Position := 1;
                    end;
                }
                dataitem(QRCode; "Integer")
                {
                    DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));
                    column(Sales_Invoice_Header___QR_Code_; "Cust. Ledger Entry"."QR Code")
                    {
                    }
                    column(QRCode_Number; Number)
                    {
                    }

                    trigger OnAfterGetRecord();
                    begin
                        "Cust. Ledger Entry".CALCFIELDS("QR Code");
                    end;
                }
            }

            trigger OnAfterGetRecord();
            begin

                //////////////////////////////////////////////////////
                //LLAMA A LA FUNCION PARA LLENAR TABLA TEMPORAL. 
                GetCustomerApply("Cust. Ledger Entry");
                //////////////////////////////////////////////////////
                Cust.GET("Customer No.");
                FormatAddr.Customer(CustAddr, Cust);////te manda  a otro lado 

                if not Currency.GET("Currency Code") then
                    Currency.InitRoundingPrecision;

                if "Document Type" = "Document Type"::Payment then begin
                    ReportTitle := Text003;
                    PaymentDiscountTitle := Text006;
                end else begin
                    ReportTitle := Text004;
                    PaymentDiscountTitle := Text007;
                end;

                CALCFIELDS("Original Amount", Amount);
                RemainingAmount := -"Original Amount";

                "Cust. Ledger Entry".CALCFIELDS("Original String", "Digital Stamp SAT", "Digital Stamp PAC");
                CLEAR(OriginalStringBigText);
                TempBlob.Blob := "Cust. Ledger Entry"."Original String";
                BlobMgt.Read(OriginalStringBigText, TempBlob);
                TempBlob.Blob := "Cust. Ledger Entry"."Digital Stamp SAT";
                CLEAR(DigitalSignatureBigText);
                BlobMgt.Read(DigitalSignatureBigText, TempBlob);
                TempBlob.Blob := "Cust. Ledger Entry"."Digital Stamp PAC";
                CLEAR(DigitalSignaturePACBigText);
                BlobMgt.Read(DigitalSignaturePACBigText, TempBlob);

                if "Cust. Ledger Entry"."Payment Method Code" <> '' then begin
                    TbPaymentMethod.SetRange(Code, "Cust. Ledger Entry"."Payment Method Code");
                    if TbPaymentMethod.FindFirst() then begin
                        TbSATMetodoPago.SetRange(Code, TbPaymentMethod."SAT Method of Payment");
                        if TbSATMetodoPago.FindFirst() then begin
                            VarFormaPago := TbSATMetodoPago.Code + ' - ' + TbSATMetodoPago.Description;
                        end;
                    end;

                end;


                VarFechaPago := FORMAT("Cust. Ledger Entry"."Posting Date", 10, '<Year4>-<Month,2>-<Day,2>') + ' 00:00:00';

                if "Cust. Ledger Entry"."Currency Code" <> '' then begin
                    if TbDivisa.GET("Cust. Ledger Entry"."Currency Code") then
                        VarMonedaPago := TbDivisa.Code + ' ' + TbDivisa.Description;
                end
                else
                    VarMonedaPago := 'MXN Peso Mexicano';

                VarMontoPago := FORMAT("Cust. Ledger Entry".Amount, 0, '<Integer><Decimals,3>');
            end;

            trigger OnPreDataItem();
            begin
                CompanyInfo.GET;
                CompanyInfo.CalcFields(Picture);////++++
                FormatAddr.Company(CompanyAddr, CompanyInfo);
                GLSetup.GET;
            end;
        }
    }

    requestpage
    {

        layout
        {
        }

        actions
        {
        }
    }

    labels
    {
    }

    var
        monedaTEMP: Code[10];
        PAC_UUID_salesInvoice: Text[50];
        CompanyInfo: Record "Company Information";
        GLSetup: Record "General Ledger Setup";
        Cust: Record Customer;
        Currency: Record Currency;
        FormatAddr: Codeunit "Format Address";
        ReportTitle: Text[30];
        PaymentDiscountTitle: Text[30];
        CompanyAddr: array[8] of Text[50];
        CustAddr: array[8] of Text[50];
        RemainingAmount: Decimal;
        AppliedAmount: Decimal;
        PmtDiscInvCurr: Decimal;
        PmtTolInvCurr: Decimal;
        PmtDiscPmtCurr: Decimal;
        Text003: TextConst ENU = 'Payment Receipt', ESM = 'Recepción pago', FRC = 'Reçu de paiement', ENC = 'Payment Receipt';
        Text004: TextConst ENU = 'Payment Voucher', ESM = 'Justific. pago', FRC = 'Pièce justificative paiement', ENC = 'Payment Voucher';
        Text006: TextConst ENU = 'Pmt. Disc. Given', ESM = 'Dto. P.P concedido', FRC = 'Escompte de paiement donné', ENC = 'Pmt. Disc. Given';
        Text007: TextConst ENU = 'Pmt. Disc. Rcvd.', ESM = 'Dto. P.P. recib.', FRC = 'Esc. paiem. reçu', ENC = 'Pmt. Disc. Rcvd.';
        PmtTolPmtCurr: Decimal;
        ShowAmount: Decimal;
        CompanyInfoPhoneNoCaptionLbl: TextConst ENU = 'Phone No.', ESM = 'Nº teléfono', FRC = 'N° téléphone', ENC = 'Phone No.';
        CompanyInfoGiroNoCaptionLbl: TextConst ENU = 'Giro No.', ESM = 'Nº giro postal', FRC = 'N° CCP', ENC = 'Giro No.';
        CompanyInfoBankNameCptnLbl: TextConst ENU = 'Bank', ESM = 'Banco', FRC = 'Banque', ENC = 'Bank';
        CompanyInfoBankAccNoCptnLbl: TextConst ENU = 'Account No.', ESM = 'Nº cuenta', FRC = 'N° de compte', ENC = 'Account No.';
        ReceiptNoCaptionLbl: TextConst ENU = 'Receipt No.', ESM = 'Nº recepción', FRC = 'N° bon de réception', ENC = 'Receipt No.';
        CompanyInfoVATRegNoCptnLbl: TextConst ENU = 'GST Reg. No.', ESM = 'Nº registro impuesto sobre bienes y servicios (IBS)', FRC = 'N° enreg. GST', ENC = 'GST Reg. No.';
        CustLedgEntry1PostDtCptnLbl: TextConst ENU = 'Posting Date', ESM = 'Fecha registro', FRC = 'Date de report', ENC = 'Posting Date';
        AmountCaptionLbl: TextConst ENU = 'Amount', ESM = 'Importe', FRC = 'Montant', ENC = 'Amount';
        PaymAmtSpecificationCptnLbl: TextConst ENU = 'Payment Amount Specification', ESM = 'Especificación importe pago', FRC = 'Détail montant règlement', ENC = 'Payment Amount Specification';
        PmtTolInvCurrCaptionLbl: TextConst ENU = 'Pmt Tol.', ESM = 'Total pago', FRC = 'Tolérance règlement', ENC = 'Pmt Tol.';
        DocumentDateCaptionLbl: TextConst ENU = 'Document Date', ESM = 'Fecha emisión documento', FRC = 'Date de document', ENC = 'Document Date';
        CompanyInfoEMailCaptionLbl: TextConst ENU = 'Email', ESM = 'Correo electrónico', FRC = 'Courriel', ENC = 'Email';
        CompanyInfoHomePageCptnLbl: TextConst ENU = 'Home Page', ESM = 'Página principal', FRC = 'Page d''accueil', ENC = 'Home Page';
        PaymAmtNotAllocatedCptnLbl: TextConst ENU = 'Payment Amount Not Allocated', ESM = 'Importe pago sin asignar', FRC = 'Montant règlement non affecté', ENC = 'Payment Amount Not Allocated';
        CustLedgEntryOrgAmtCptnLbl: TextConst ENU = 'Payment Amount', ESM = 'Importe pago', FRC = 'Montant règlement', ENC = 'Payment Amount';
        ExternalDocumentNoCaptionLbl: TextConst ENU = 'External Document No.', ESM = 'Nº documento externo', FRC = 'N° de document externe', ENC = 'External Document No.';
        OriginalStringBigText: BigText;
        DigitalSignatureBigText: BigText;
        DigitalSignaturePACBigText: BigText;
        TempBlob: Record TempBlobExten;
        BlobMgt: Codeunit BlobManagementExten;
        OriginalStringText: Text[80];
        DigitalSignatureText: Text[130];
        DigitalSignaturePACText: Text[130];
        Position: Integer;
        Original_StringCaptionLbl: TextConst ENU = 'Original string of digital certificate complement from SAT', ESM = 'Cadena original del complemento de certificado digital del SAT', FRC = 'Chaîne d''origine du complément de certificat numérique de SAT', ENC = 'Original string of digital certificate complement from SAT';
        Digital_StampCaptionLbl: TextConst ENU = 'Digital stamp from SAT', ESM = 'Sello digital del SAT', FRC = 'Marquage numérique de SAT', ENC = 'Digital stamp from SAT';
        Digital_stampCaption_Control1020008Lbl: TextConst ENU = 'Digital stamp', ESM = 'Sello digital', FRC = 'Marquage numérique', ENC = 'Digital stamp';
        TbPaymentMethod: Record "Payment Method";
        VarFormaPago: Text;
        TbSATMetodoPago: Record "SAT Payment Method Code";
        VarFechaPago: Text;
        VarMonedaPago: Text;
        VarMontoPago: Text;
        TbDivisa: Record Currency;
        NoOperation: Code[16];
        TempCustLedgerEntry: Record "Cust. Ledger Entry" temporary;
        NumberOfLines: Integer;
        PaymentMethodCode: Code[10];
        TerminosPago: Code[10];
        OnLineNumber: Integer;
        CreateCustLedgEntry: Record "Cust. Ledger Entry";

    local procedure CurrencyCode(SrcCurrCode: Code[10]): Code[10];
    begin
        if SrcCurrCode = '' then
            exit(GLSetup."LCY Code");
        exit(SrcCurrCode);
    end;

    procedure GetCustomerApply(CustLedgerEntry: Record "Cust. Ledger Entry");
    var
        ApplyCust: Page "Applied Customer Entries";
    begin

        TempCustLedgerEntry.DELETEALL;
        CLEAR(ApplyCust);
        //ApplyCust.GetApplicationEntry(CustLedgerEntry,TempCustLedgerEntry);
        GetApplicationEntryPBA(CustLedgerEntry, TempCustLedgerEntry);
    end;

    local procedure GetApplicationEntryPBA(CustLedgerEntry: Record "Cust. Ledger Entry"; VAR CustLedgerEntryTemp: Record "Cust. Ledger Entry" temporary)
    var
        CustLedgerEntryBIS: Record "Cust. Ledger Entry";
        CustLedgerEntryBIS2: Record "Cust. Ledger Entry";
        DtldCustLedgEntry1: Record "Detailed Cust. Ledg. Entry";
        DtldCustLedgEntry2: Record "Detailed Cust. Ledg. Entry";
        primermov: Integer;
        segundomov: Integer;
        remaining: Decimal;
    begin


        CustLedgerEntryBIS := CustLedgerEntry;
        CustLedgerEntryBIS.CALCFIELDS("Last Detail Cust. Mov", CustLedgerEntryBIS."First Detail Cust. Mov");


        primermov := CustLedgerEntryBIS."First Detail Cust. Mov";
        segundomov := CustLedgerEntryBIS."Last Detail Cust. Mov";

        WITH CustLedgerEntry DO BEGIN
            IF "Entry No." <> 0 THEN BEGIN
                CreateCustLedgEntry := CustLedgerEntry;
                //***FindApplnEntriesDtldtLedgEntry;
                DtldCustLedgEntry1.SETCURRENTKEY("Cust. Ledger Entry No.");
                DtldCustLedgEntry1.SETRANGE("Cust. Ledger Entry No.", CreateCustLedgEntry."Entry No.");
                DtldCustLedgEntry1.SETRANGE(Unapplied, FALSE);
                IF DtldCustLedgEntry1.FIND('-') THEN
                    REPEAT
                        IF DtldCustLedgEntry1."Cust. Ledger Entry No." =
                           DtldCustLedgEntry1."Applied Cust. Ledger Entry No."
                        THEN BEGIN
                            DtldCustLedgEntry2.INIT;
                            DtldCustLedgEntry2.SETCURRENTKEY("Applied Cust. Ledger Entry No.", "Entry Type");
                            DtldCustLedgEntry2.SETRANGE(
                              "Applied Cust. Ledger Entry No.", DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
                            DtldCustLedgEntry2.SETRANGE("Entry Type", DtldCustLedgEntry2."Entry Type"::Application);
                            DtldCustLedgEntry2.SETRANGE(Unapplied, FALSE);
                            IF DtldCustLedgEntry2.FIND('-') THEN
                                REPEAT
                                    IF DtldCustLedgEntry2."Cust. Ledger Entry No." <>
                                       DtldCustLedgEntry2."Applied Cust. Ledger Entry No."
                                    THEN BEGIN
                                        SETCURRENTKEY("Entry No.");
                                        SETRANGE("Entry No.", DtldCustLedgEntry2."Cust. Ledger Entry No.");
                                        IF FIND('-') THEN
                                            MARK(TRUE);
                                    END;
                                UNTIL DtldCustLedgEntry2.NEXT = 0;
                        END ELSE BEGIN
                            SETCURRENTKEY("Entry No.");
                            SETRANGE("Entry No.", DtldCustLedgEntry1."Applied Cust. Ledger Entry No.");
                            IF FIND('-') THEN
                                MARK(TRUE);
                        END;
                    UNTIL DtldCustLedgEntry1.NEXT = 0;
                //***
                SETCURRENTKEY("Entry No.");
                SETRANGE("Entry No.");
                IF CreateCustLedgEntry."Closed by Entry No." <> 0 THEN BEGIN
                    "Entry No." := CreateCustLedgEntry."Closed by Entry No.";
                    MARK(TRUE);
                END;
                SETCURRENTKEY("Closed by Entry No.");
                SETRANGE("Closed by Entry No.", CreateCustLedgEntry."Entry No.");
                IF FIND('-') THEN
                    REPEAT
                        MARK(TRUE);
                    UNTIL NEXT = 0;
                SETCURRENTKEY("Entry No.");
                SETRANGE("Closed by Entry No.");
            END;
            MARKEDONLY(TRUE);
            IF FIND('-') THEN
                REPEAT
                    CustLedgerEntryTemp.INIT;

                    CustLedgerEntryTemp.TRANSFERFIELDS(CustLedgerEntry);

                    CustLedgerEntryTemp.SETFILTER("Entry Filter", '<=%1', CustLedgerEntryBIS."Last Detail Cust. Mov");    /////el %1 trae el primer movimiento 65
                    CustLedgerEntryTemp.CALCFIELDS("Remaining AmountExt", "Count Of Apply");//++redirigido
                    CustLedgerEntryTemp.ImpSaldoInsoluto := CustLedgerEntryTemp."Remaining AmountExt";////////////+++++++redirigido con nueva formula 
                    CustLedgerEntryTemp.NumParcialidad := CustLedgerEntryTemp."Count Of Apply";
                    CustLedgerEntryTemp.SETFILTER("Entry Filter", '<=%1', CustLedgerEntryBIS."First Detail Cust. Mov");
                    CustLedgerEntryTemp.CALCFIELDS("Remaining AmountExt");//++redirigido
                    remaining := CustLedgerEntryTemp."Remaining AmountExt";//////+++++
                    CustLedgerEntryTemp.ImpSaldoAnt := CustLedgerEntryTemp."Remaining AmountExt";//++redirigido
                    CustLedgerEntryTemp.ImpPagado := CustLedgerEntryTemp.ImpSaldoAnt - CustLedgerEntryTemp.ImpSaldoInsoluto;
                    CustLedgerEntryTemp.INSERT;
                UNTIL NEXT = 0;
        END;


    end;
}
report 50112 "Paquetes de Transferencia"
{
    DefaultLayout = RDLC;
    RDLCLayout = './PaqueteTransferencia.rdl';
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;

    dataset
    {
        dataitem(TransferenciaPaqueteHeader; TransferenciaPaqueteHeader)
        {
            column(No_; "No.")
            {
            }
            column(NoPaquete; "N° Paquete")
            {
            }
            column(CompanyInfoPic; CompanyInfo.Picture)
            {
            }
            column(Transfer_from_Code; "Transfer-from Code")
            {

            }
            column(Transfer_to_Code; "Transfer-to Code")
            {

            }

            dataitem(TransferPackageLine; TransferPackageLine)
            {
                DataItemLink = "Document No." = field("No.");
                DataItemTableView = SORTING("Document No.", "Line No");

                column(Item_No; "Item No")
                {
                }
                column(Description; Description)
                {
                }
                column(Quantity; Quantity)
                {
                }
                column(Package_No_; "Package No.")
                {
                }

                dataitem(itemPic; item)
                {
                    DataItemLinkReference = TransferPackageLine;
                    DataItemLink = "No." = field("Item No");

                    column(itemPicture; picture)
                    {
                    }
                }
            }

        }
    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }
    }
    trigger OnPreReport()
    var
    //myInt: Integer;
    begin
        CompanyInfo.Get();
        CompanyInfo.CalcFields(Picture);
    end;

    var
        CompanyInfo: Record "Company Information";
        NombreVendedor: Text[50];

}
report 50113 "Ficha técnica cliente"
{
    DefaultLayout = RDLC;
    RDLCLayout = './FichaTecCliente.rdl';
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;

    dataset
    {
        dataitem(itemPic; item)
        {
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(NomEmpresa; CompanyInfo.Name)
            {
            }
            column(direccion1; CompanyInfo.Address)
            {
            }
            column(direccion2; CompanyInfo."Address 2")
            {
            }
            column(City; CompanyInfo.City)
            {
            }
            column(CodPais; CompanyInfo."Country/Region Code")
            {
            }
            column(CP; CompanyInfo."Post Code")
            {
            }
            column(Email; CompanyInfo."E-Mail")
            {
            }
            column(No_; "No.")
            {
            }
            column(Description; Description)
            {
            }
            column(itemPicture; picture)
            {
            }
            column(UbicacionGeo; UbicacionGeo)
            {
            }
            column(Ancho; Ancho)
            {
            }
            column(Largo; Largo)
            {
            }
            column(Alto; Alto)
            {
            }
            column(Descontinuado; Descontinuado)
            {
            }
            column(categoria; categoria)
            {
            }
            column(origen; origen)
            {
            }
            column(PaisOrigen; PaisOrigen)
            {
            }
            column(region; region)
            {
            }
            column(Antiguedad; Antiguedad)
            {
            }
            column(NivelFragilidad; NivelFragilidad)
            {
            }
            column(AltoAsiento; AltoAsiento)
            {
            }
            column(Diametro; Diametro)
            {
            }
            column(Material; Material)
            {
            }
            column(volumen; volumen)
            {
            }
            column(tipo; tipo)
            {

            }
            column(Madera; Madera)
            {

            }
            column(Subcategoria; Subcategoria)
            {

            }
            column(UsosYCuidados; UsosYCuidados)
            {

            }
            column(CondicionesEntrega; CondicionesEntrega)
            {

            }
            column("reseña"; "ReseñaText")
            {
            }
            column(ubicacion; ubicacion)
            {

            }

            trigger OnAfterGetRecord()
            var
                MapeoValorAtributo: Record "Item Attribute Value Mapping";
                ValorAtributoProducto: Record "Item Attribute Value";
            begin
                Ancho := '';
                Largo := '';
                Alto := '';
                Descontinuado := '';

                MapeoValorAtributo.SetRange("Table ID", 27);
                MapeoValorAtributo.SetRange("No.", "No.");
                if MapeoValorAtributo.FindSet() then begin
                    repeat

                        ValorAtributoProducto.Reset();
                        ValorAtributoProducto.SetRange("Attribute ID", MapeoValorAtributo."Item Attribute ID");
                        ValorAtributoProducto.SetRange(ID, MapeoValorAtributo."Item Attribute Value ID");
                        if ValorAtributoProducto.FindFirst() then begin
                            //valores  id 
                            if ValorAtributoProducto."Attribute ID" = 1 then begin
                                Descontinuado := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 2 then begin
                                categoria := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 3 then begin
                                origen := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 4 then begin
                                PaisOrigen := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 5 then begin
                                region := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 6 then begin
                                Antiguedad := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 7 then begin
                                NivelFragilidad := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 8 then begin
                                UsosYCuidados := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 9 then begin
                                CondicionesEntrega := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 10 then begin
                                Material := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 11 then begin
                                tipo := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 12 then begin
                                Madera := ValorAtributoProducto.Value;
                            end;
                            //alto
                            if ValorAtributoProducto."Attribute ID" = 13 then begin
                                Alto := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 14 then begin
                                AltoAsiento := ValorAtributoProducto.Value;
                            end;
                            //largo
                            if ValorAtributoProducto."Attribute ID" = 15 then begin
                                Largo := ValorAtributoProducto.Value;
                            end;
                            //ancho 
                            if ValorAtributoProducto."Attribute ID" = 16 then begin
                                Ancho := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 17 then begin
                                Diametro := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 18 then begin
                                volumen := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 19 then begin
                                "reseña" := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 20 then begin
                                ubicacion := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 21 then begin
                                precioIvaIncl := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 22 then begin
                                DescuentoEspecial := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 23 then begin
                                FechaUltimaCompra := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 24 then begin
                                FechaUltimaVenta := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 25 then begin
                                Bloqueado := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 26 then begin
                                DescuentoAplicable := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 27 then begin
                                CodExterno := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 28 then begin
                                stokdisponible := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 29 then begin
                                reservadoConAnticipo := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 30 then begin
                                reservadoSinAnticipo := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 31 then begin
                                VendibleCasaPalacio := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 32 then begin
                                Subcategoria := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 33 then begin
                                origen := ValorAtributoProducto.Value;
                            end;

                        end;
                    until MapeoValorAtributo.Next() = 0;
                end;
                //////agarra el dato ReseñaBigTex
                CALCFIELDS(ResenaBlob);
                TempBlob.Blob := ResenaBlob;
                Clear(ReseñaBigtex);
                BlobMgt.Read("ReseñaBigtex", TempBlob);
                "ReseñaText" := GetResenaBigText();
                //Message('DESCRIPCION DE TRABAJO %1', WorkDescriptionText);
            end;
        }
    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }
    }
    trigger OnPreReport()
    var
    //myInt: Integer;
    begin
        CompanyInfo.Get();
        CompanyInfo.CalcFields(Picture);
    end;

    var
        CompanyInfo: Record "Company Information";
        Descontinuado: Text[250];
        categoria: Text[250];
        origen: Text[250];
        PaisOrigen: Text[250];
        region: Text[250];
        Antiguedad: Text[250];
        NivelFragilidad: Text[250];
        UsosYCuidados: Text[250];
        CondicionesEntrega: Text[250];
        Material: Text[250];
        tipo: Text[250];
        Madera: Text[250];
        Alto: Text[250];
        AltoAsiento: Text[250];
        Largo: Text[250];
        Ancho: text[250];
        Diametro: Text[250];
        volumen: Text[250];
        reseña: Text[250];
        ubicacion: Text[250];
        precioIvaIncl: Text[250];
        DescuentoEspecial: Text[250];
        FechaUltimaCompra: Text[250];
        FechaUltimaVenta: Text[250];
        Bloqueado: Text[250];
        DescuentoAplicable: Text[250];
        CodExterno: Text[250];
        stokdisponible: Text[250];
        reservadoConAnticipo: Text[250];
        reservadoSinAnticipo: Text[250];
        VendibleCasaPalacio: Text[250];
        Subcategoria: Text[250];
        grupo: Text[250];
        TempBlob: Record TempBlobExten;
        ReseñaBigtex: BigText;
        BlobMgt: Codeunit BlobManagementExten;
        ReseñaText: Text;

}
report 50114 "Ficha técnica NAMUH"
{
    DefaultLayout = RDLC;
    RDLCLayout = './FichaTecNAMUH.rdl';
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;

    dataset
    {
        dataitem(itemPic; item)
        {
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(NomEmpresa; CompanyInfo.Name)
            {
            }
            column(direccion1; CompanyInfo.Address)
            {
            }
            column(direccion2; CompanyInfo."Address 2")
            {
            }
            column(City; CompanyInfo.City)
            {
            }
            column(CodPais; CompanyInfo."Country/Region Code")
            {
            }
            column(CP; CompanyInfo."Post Code")
            {
            }
            column(Email; CompanyInfo."E-Mail")
            {
            }
            column(No_; "No.")
            {
            }
            column(Description; Description)
            {
            }
            column(itemPicture; picture)
            {
            }
            column(Inventory; Inventory)
            {
            }
            column(UbicacionGeo; UbicacionGeo)
            {
            }
            column(Ancho; Ancho)
            {
            }
            column(Largo; Largo)
            {
            }
            column(Alto; Alto)
            {
            }
            column(Descontinuado; Descontinuado)
            {
            }
            column(categoria; categoria)
            {
            }
            column(origen; origen)
            {
            }
            column(PaisOrigen; PaisOrigen)
            {
            }
            column(region; region)
            {
            }
            column(Antiguedad; Antiguedad)
            {
            }
            column(NivelFragilidad; NivelFragilidad)
            {
            }
            column(AltoAsiento; AltoAsiento)
            {
            }
            column(Diametro; Diametro)
            {
            }
            column(Material; Material)
            {
            }
            column(volumen; volumen)
            {
            }
            column(tipo; tipo)
            {

            }
            column(Madera; Madera)
            {

            }
            column(Subcategoria; Subcategoria)
            {

            }
            column(UsosYCuidados; UsosYCuidados)
            {

            }
            column(CondicionesEntrega; CondicionesEntrega)
            {

            }
            column("reseña"; "ReseñaText")
            {

            }
            column(ubicacion; ubicacion)
            {

            }
            column(Bloqueado; Bloqueado)
            {

            }
            column(reservadoConAnticipo; reservadoConAnticipo)
            {

            }
            column(reservadoSinAnticipo; reservadoSinAnticipo)
            {

            }
            column(VendibleCasaPalacio; VendibleCasaPalacio)
            {

            }
            column(DescuentoAplicable; DescuentoAplicable)
            {

            }
            column(CodExterno; CodExterno)
            {

            }
            column(Unit_Price; "Unit Cost")
            {

            }
            column(FechaUltimaCompra; FechaUltimaCompra)
            {

            }
            column(FechaUltimaVenta; FechaUltimaVenta)
            {

            }

            /*dataitem(MapeoValorAtributo; "Item Attribute Value Mapping")
            {
                DataItemLink = "No." = field ("No.");
                DataItemTableView = sorting ("No.", "Table ID") where ("Table ID" = const (27));

            }*/



            trigger OnAfterGetRecord()
            var
                MapeoValorAtributo: Record "Item Attribute Value Mapping";
                ValorAtributoProducto: Record "Item Attribute Value";

                ItemLedEntry: Record "Item Ledger Entry";

            begin
                Ancho := '';
                Largo := '';
                Alto := '';
                Descontinuado := '';
                CalcFields(Inventory);

                MapeoValorAtributo.SetRange("Table ID", 27);
                MapeoValorAtributo.SetRange("No.", "No.");
                if MapeoValorAtributo.FindSet() then begin
                    repeat

                        ValorAtributoProducto.Reset();
                        ValorAtributoProducto.SetRange("Attribute ID", MapeoValorAtributo."Item Attribute ID");
                        ValorAtributoProducto.SetRange(ID, MapeoValorAtributo."Item Attribute Value ID");
                        if ValorAtributoProducto.FindFirst() then begin
                            //valores  id 
                            if ValorAtributoProducto."Attribute ID" = 1 then begin
                                Descontinuado := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 2 then begin
                                categoria := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 3 then begin
                                origen := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 4 then begin
                                PaisOrigen := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 5 then begin
                                region := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 6 then begin
                                Antiguedad := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 7 then begin
                                NivelFragilidad := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 8 then begin
                                UsosYCuidados := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 9 then begin
                                CondicionesEntrega := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 10 then begin
                                Material := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 11 then begin
                                tipo := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 12 then begin
                                Madera := ValorAtributoProducto.Value;
                            end;
                            //alto
                            if ValorAtributoProducto."Attribute ID" = 13 then begin
                                Alto := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 14 then begin
                                AltoAsiento := ValorAtributoProducto.Value;
                            end;
                            //largo
                            if ValorAtributoProducto."Attribute ID" = 15 then begin
                                Largo := ValorAtributoProducto.Value;
                            end;
                            //ancho 
                            if ValorAtributoProducto."Attribute ID" = 16 then begin
                                Ancho := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 17 then begin
                                Diametro := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 18 then begin
                                volumen := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 19 then begin
                                "reseña" := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 20 then begin
                                ubicacion := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 21 then begin
                                precioIvaIncl := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 22 then begin
                                DescuentoEspecial := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 23 then begin
                                //FechaUltimaCompra := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 24 then begin
                                //FechaUltimaVenta := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 25 then begin
                                Bloqueado := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 26 then begin
                                DescuentoAplicable := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 27 then begin
                                CodExterno := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 28 then begin
                                stokdisponible := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 29 then begin
                                reservadoConAnticipo := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 30 then begin
                                reservadoSinAnticipo := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 31 then begin
                                VendibleCasaPalacio := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 32 then begin
                                Subcategoria := ValorAtributoProducto.Value;
                            end;
                            if ValorAtributoProducto."Attribute ID" = 33 then begin
                                origen := ValorAtributoProducto.Value;
                            end;

                        end;
                    until MapeoValorAtributo.Next() = 0;
                end;
                //////agarra el dato ReseñaBigTex
                CALCFIELDS(ResenaBlob);
                TempBlob.Blob := ResenaBlob;
                Clear(ReseñaBigtex);
                BlobMgt.Read("ReseñaBigtex", TempBlob);
                "ReseñaText" := GetResenaBigText();
                ///// empieza a buscar ultimas fechas/////
                ItemLedEntry.SetCurrentKey("Item No.", "Entry Type");
                ItemLedEntry.SetRange("Item No.", "No.");
                ItemLedEntry.SetRange("Entry Type", ItemLedEntry."Entry Type"::Purchase);
                if ItemLedEntry.FindLast() then begin
                    FechaUltimaCompra := ItemLedEntry."Posting Date";
                end;
                ItemLedEntry.Reset();
                ItemLedEntry.SetCurrentKey("Item No.", "Entry Type");
                ItemLedEntry.SetRange("Item No.", "No.");
                ItemLedEntry.SetRange("Entry Type", ItemLedEntry."Entry Type"::Sale);
                if ItemLedEntry.FindLast() then begin
                    FechaUltimaVenta := ItemLedEntry."Posting Date";
                end;
            end;
        }
    }

    requestpage
    {
        layout
        {
            area(Content)
            {
                group(GroupName)
                {
                    /*field(Name; SourceExpression)
                    {
                        ApplicationArea = All;
                        
                    }*/
                }
            }
        }
    }
    trigger OnPreReport()
    var
    //myInt: Integer;
    begin
        CompanyInfo.Get();
        CompanyInfo.CalcFields(Picture);
    end;

    var
        CompanyInfo: Record "Company Information";
        Descontinuado: Text[250];
        categoria: Text[250];
        origen: Text[250];
        PaisOrigen: Text[250];
        region: Text[250];
        Antiguedad: Text[250];
        NivelFragilidad: Text[250];
        UsosYCuidados: Text[250];
        CondicionesEntrega: Text[250];
        Material: Text[250];
        tipo: Text[250];
        Madera: Text[250];
        Alto: Text[250];
        AltoAsiento: Text[250];
        Largo: Text[250];
        Ancho: text[250];
        Diametro: Text[250];
        volumen: Text[250];
        reseña: Text[250];
        ubicacion: Text[250];
        precioIvaIncl: Text[250];
        DescuentoEspecial: Text[250];
        FechaUltimaCompra: Date;
        FechaUltimaVenta: Date;
        Bloqueado: Text[250];
        DescuentoAplicable: Text[250];
        CodExterno: Text[250];
        stokdisponible: Text[250];
        reservadoConAnticipo: Text[250];
        reservadoSinAnticipo: Text[250];
        VendibleCasaPalacio: Text[250];
        Subcategoria: Text[250];
        grupo: Text[250];
        TempBlob: Record TempBlobExten;
        ReseñaBigtex: BigText;
        BlobMgt: Codeunit BlobManagementExten;
        ReseñaText: Text;


}
report 50115 "PBA Pedido Venta"
{
    UsageCategory = Administration;
    ApplicationArea = All;
    DefaultLayout = RDLC;
    RDLCLayout = 'PBA Pedido Venta.rdl';

    dataset
    {
        dataitem("Sales Header"; "Sales Header")
        {
            column(PBATitulo; PBATitulo) { }
            column(PBAFecha; PBAFecha) { }
            column(PBANoPedido; PBANoPedido) { }
            column(PBANoPagina; PBANoPagina) { }
            column(Bill_to_Customer_No_; "Bill-to Customer No.") { }
            column(Bill_to_Name; "Bill-to Name") { }
            column(Bill_to_Name_2; "Bill-to Name 2") { }
            column(Bill_to_Address; "Bill-to Address") { }
            column(Bill_to_Address_2; "Bill-to Address 2") { }
            column(Bill_to_City; "Bill-to City") { }
            column(Bill_to_Contact; "Bill-to Contact") { }
            column(Ship_to_Code; "Ship-to Code") { }
            column(Ship_to_Name; "Ship-to Name") { }
            column(Ship_to_Name_2; "Ship-to Name 2") { }
            column(Ship_to_Address; "Ship-to Address") { }
            column(Ship_to_Address_2; "Ship-to Address 2") { }
            column(Ship_to_City; "Ship-to City") { }
            column(Sell_to_Customer_No_; "Sell-to Customer No.") { }
            column(Salesperson_Code; "Salesperson Code") { }
            column(Amount_Including_VATCalculado; "Amount Including VAT") { }
            column(PBAIVA; PBAIVA) { }
            column(PBACantidadConIva; PBACantidadConIva) { }
            column(PBACantidadSinIva; PBACantidadSinIva) { }
            column(Bill_to_Post_Code; "Bill-to Post Code") { }
            column(Ship_to_County; "Ship-to County") { }
            column(Ship_to_Post_Code; "Ship-to Post Code") { }
            column(PBANombreVendedor; PBANombreVendedor) { }
            column(N__Pizarra; "N° Pizarra") { }
            column(DescripcionPizarra; DescripcionPizarra) { }
            column(Picture; CompanyInfo.Picture) { }
            column(Requested_Delivery_Date; "Requested Delivery Date") { }
            column(Payment_Terms_Code; "Payment Terms Code") { }
            column(DescripcionTermPago; DescripcionTermPago) { }
            column(Shipment_Method_Code; "Shipment Method Code") { }
            column(DescripcionMetodoEnvio; DescripcionMetodoEnvio) { }

            dataitem("Sales Line"; "Sales Line")
            {
                DataItemLink = "Document No." = FIELD("No.");
                column(Document_No_; "Document No.") { }
                column(Quantity; Quantity) { }
                column(No_; "No.") { }
                column(Description; Description) { }
                column(Location_Code; "Location Code") { }
                column(Unit_Price; "Unit Price") { }
                column(Amount_Including_VAT; "Amount Including VAT") { }
                column(Line_Amount; "Line Amount") { }
                column(TotalDescuentos; TotalDescuentos) { }

                column(medidas; medidas)
                {
                }
                column(WorkDescription; WorkDescriptionText)
                {
                }
                dataitem(itemPic; item)
                {
                    DataItemLinkReference = "Sales Line";
                    DataItemLink = "No." = field("No.");

                    column(itemPicture; picture)
                    {
                    }
                    trigger OnAfterGetRecord()
                    var
                        MapeoValorAtributo: Record "Item Attribute Value Mapping";
                        ValorAtributoProducto: Record "Item Attribute Value";
                        Auxiliar: Code[20];
                    begin
                        Ancho := '';
                        Largo := '';
                        Alto := '';
                        Auxiliar := "No.";
                        medidas := '';
                        MapeoValorAtributo.SetRange("Table ID", 27);
                        MapeoValorAtributo.SetRange("No.", Auxiliar);

                        if MapeoValorAtributo.FindSet() then begin
                            repeat

                                ValorAtributoProducto.Reset();
                                ValorAtributoProducto.SetRange("Attribute ID", MapeoValorAtributo."Item Attribute ID");
                                ValorAtributoProducto.SetRange(ID, MapeoValorAtributo."Item Attribute Value ID");
                                if ValorAtributoProducto.FindFirst() then begin
                                    //valores  id 

                                    //ancho 
                                    if ValorAtributoProducto."Attribute ID" = 16 then begin
                                        Ancho := ValorAtributoProducto.Value;
                                    end;

                                    //largo
                                    if ValorAtributoProducto."Attribute ID" = 15 then begin
                                        Largo := ValorAtributoProducto.Value;
                                    end;

                                    //Alto Asiento
                                    if ValorAtributoProducto."Attribute ID" = 14 then begin
                                        AltoAsiento := ValorAtributoProducto.Value;
                                    end;
                                    //alto
                                    if ValorAtributoProducto."Attribute ID" = 13 then begin
                                        Alto := ValorAtributoProducto.Value;
                                    end;

                                end;

                            until MapeoValorAtributo.Next() = 0;


                            if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x ' + Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;

                            if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x ' + Ancho + ' " " x ' + AltoAsiento;
                            end;

                            if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := Largo + ' x ' + Ancho + ' " " " " ';
                            end;

                            if ((Largo <> '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x  " "' + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := Largo + ' x " "' + ' x  " "' + ' x ' + AltoAsiento;
                            end;
                            if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := Largo;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := '" " x ' + Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := '" " x ' + Ancho + ' x " "' + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                                medidas := '" " x ' + Ancho;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                                medidas := '" " x " "' + ' x ' + Alto + ' x ' + AltoAsiento;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := '" " x  " "' + ' x ' + Alto;
                            end;
                            if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := '" " x ' + Ancho + ' x ' + Alto;
                            end;
                            if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                                medidas := Largo + ' x ' + Ancho + ' x ' + Alto;
                            end;
                            if ((Largo = '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                                medidas := '" " x " " x " " x ' + AltoAsiento;
                            end;

                        end;

                    end;
                }


            }
            trigger OnAfterGetRecord()
            var
                salesline: Record "Sales Line";
                TPizarra: Record Pizarra;
                PaymentTerms: Record "Payment Terms";
                ShipmentMethod: Record "Shipment Method";
                TempBlob: Record TempBlobExten;
                BlobMgt: Codeunit BlobManagementExten;
                s: Record "Sales Header";
            begin
                PBATitulo := 'PEDIDO DE VENTA';
                PBAFecha := Today();
                PBANoPedido := "Sales Header"."No.";
                PBANoPagina := "Sales Header"."Doc. No. Occurrence";
                CalcFields("Amount Including VAT");
                CalcFields(Amount);
                PBAIVA := ("Amount Including VAT" - Amount);
                PBACantidadConIva := "Amount Including VAT";
                PBACantidadSinIva := Amount;

                PBATABLAProveedores.SetRange(Code, "Sales Header"."Salesperson Code");
                if PBATABLAProveedores.FindFirst() then begin
                    PBANombreVendedor := PBATABLAProveedores.Name;

                end;
                ///////////////// averigua los descuentos
                SDescuento := 0;
                SumInvDisc := 0;
                salesline.SetRange("Document Type", salesline."Document Type"::Order);
                salesline.SetRange("Document No.", "No.");

                if salesline.FindFirst() then begin
                    repeat
                        SDescuento := SDescuento + salesline."Line Discount Amount";
                        SumInvDisc := SumInvDisc + salesline."Inv. Discount Amount";
                    until salesline.Next() = 0;
                    TotalDescuentos := SumInvDisc + SDescuento;
                end;
                ///////////// termina busqueda de  descuentos.

                ///// busca descripcion de pizarra 
                TPizarra.SetRange(CodigoP, "N° Pizarra");
                if TPizarra.FindFirst() then begin
                    DescripcionPizarra := TPizarra."Descripción"
                end;

                PaymentTerms.SetRange(Code, "Payment Terms Code");
                if PaymentTerms.FindFirst() then begin
                    DescripcionTermPago := PaymentTerms.Description;
                end;
                ShipmentMethod.SetRange(Code, "Shipment Method Code");
                if ShipmentMethod.FindFirst() then begin
                    DescripcionMetodoEnvio := ShipmentMethod.Description;
                end;

                //////agarra el dato workdescription
                CALCFIELDS("Work Description");
                TempBlob.Blob := "Sales Header"."Work Description";
                Clear(WorkDescriptionBigtex);
                BlobMgt.Read(WorkDescriptionBigtex, TempBlob);
                WorkDescriptionText := "Sales Header".GetWorkDescription();


            end;

        }

    }
    trigger OnPreReport()
    var
    //myInt: Integer;
    begin
        CompanyInfo.Get();
        CompanyInfo.CalcFields(Picture);
    end;

    var
        CompanyInfo: Record "Company Information";
        PBATitulo: Code[50];
        PBAFecha: Date;
        PBANoPedido: Code[50];
        PBANoPagina: Integer;
        PBAIVA: Decimal;
        PBACantidadConIva: Decimal;
        PBACantidadSinIva: Decimal;
        PBATABLAProveedores: Record "Salesperson/Purchaser";
        PBANombreVendedor: Code[80];
        SDescuento: Decimal;
        SumInvDisc: Decimal;
        TotalDescuentos: Decimal;
        DescripcionPizarra: Text[100];
        Ancho: Text[250];
        Largo: Text[250];
        Alto: Text[250];
        AltoAsiento: Text[250];
        medidas: Text[750];
        DescripcionTermPago: Text[100];
        DescripcionMetodoEnvio: Text[100];
        WorkDescriptionText: Text;
        WorkDescriptionBigtex: BigText;
}
report 50116 "Reporte Generacion Ticket"
{

    UsageCategory = Administration;
    ApplicationArea = All;
    DefaultLayout = RDLC;
    RDLCLayout = 'Reporte Ticket Zebra Namuh.rdl';

    dataset
    {
        dataitem("Purchase Header"; "Purchase Header")
        {

            column(No_; "No.") { }
            dataitem("Purchase Line"; "Purchase Line")
            {
                DataItemLink = "Document No." = FIELD("No.");


                dataitem(Integer; Integer)
                {
                    column(PBANo; PBANo) { }
                    column(PBACodigoUnidadMedida; PBACodigoUnidadMedida) { }
                    column(PBADescripcion; PBADescripcion) { }
                    column(temp; temp.Blob) { }


                    // Aplicacón Filtro Setrange
                    trigger OnPreDataItem()

                    begin
                        PBACantidad := "Purchase Line".Quantity;
                        PBADireccion := '<';
                        PBACantidad_Redondeada := Round(PBACantidad, 1);
                        SetRange(Number, 1, PBACantidad_Redondeada);

                    end;


                    trigger OnAfterGetRecord()

                    begin

                        PBANo := "Purchase Line"."No.";
                        PBACodigoUnidadMedida := "Purchase Line"."Unit of Measure Code";
                        PBADescripcion := "Purchase Line".Description;


                        Barcode.DoGenerateBarcode("Purchase Line"."No.", 0, temp);


                    end;
                }

            }


        }
    }



    var
        myInt: Integer;
        PBADescripcion: Code[50];
        PBANo: Code[30];
        PBACantidad: Decimal;
        PBACantidad_Redondeada: Decimal;
        PBADireccion: Text;
        temp: Record TempBlobExten temporary;
        Barcode: Codeunit Barcode;
        PBACodigoUnidadMedida: Code[10];
}
report 50117 "Generación Etiqueta Producto"
{
    UsageCategory = Administration;
    ApplicationArea = All;
    DefaultLayout = RDLC;
    RDLCLayout = 'Etiqueta Producto.rdl';

    dataset
    {
        dataitem(Item; Item)
        {
            dataitem(Integer; Integer)
            {

                column(PBANO; PBANO) { }
                column(PBADescripcion; PBADescripcion) { }
                column(PBAPrecio; PBAPrecio) { }
                column(PBACodDivisa; PBACodDivisa) { }
                column(temp; temp.Blob) { }
                column(PBAMostrarPrecio; PBAMostrarPrecio) { }
                column(PBAUnidadMedida; PBAUnidadMedida) { }
                column(medidas; medidas) { }

                trigger OnPreDataItem()
                var

                begin
                    SetRange(Number, 1, PBANumeroEtiquetas);

                end;



            }



            trigger OnAfterGetRecord()
            var
                MapeoValorAtributo: Record "Item Attribute Value Mapping";
                ValorAtributoProducto: Record "Item Attribute Value";
                Auxiliar: Code[20];

            begin
                PBAPrecio := 0;

                /* PBATablePrice.SetRange("Item No.", Item."No.");
                 StartingDate := Today;
                 PBATablePrice.SETFILTER("Ending Date", '%1|>=%2', 0D, StartingDate);
                 PBATablePrice.SETRANGE("Starting Date", 0D, StartingDate);
 */
                PBATablePrice.SetRange("Item No.", Item."No.");
                if PBATablePrice.FindFirst then begin

                    if PBATablePrice."Sales Type" = PBATablePrice."Sales Type"::"All Customers" then
                        PBAPrecio := PBATablePrice."Unit Price Includes VAT "





                    /*       repeat
                               if PBATablePrice."Sales Type" = PBATablePrice."Sales Type"::"Customer Price Group" then begin

                                   PBATablePrice.SetRange("Sales Code", 'NAMUH_GRAL');
                                   if PBATablePrice.FindFirst() then
                                       PBAPrecio := PBATablePrice."Unit Price Includes VAT ";
                               end;
                           until PBATablePrice.Next() = 0;*/
                end;

                PBANO := Item."No.";
                PBADescripcion := Item.Description;
                PBAUnidadMedida := Item."Base Unit of Measure";
                PBACodDivisa := 'MXN';
                if PBAMostrarPrecioUSD = true then begin
                    PBAPrecio := Item.PrecioDollar;
                    PBACodDivisa := 'USD';
                end;



                Barcode.DoGenerateBarcode(Item."No.", 0, temp);
                //Message('%1', PBAUnidadMedida);


                /////////////////////////////////////////////////////////////////////////////7
                Ancho := '';
                Largo := '';
                Alto := '';
                PBADimension := '';
                Auxiliar := "No.";
                medidas := '';
                MapeoValorAtributo.SetRange("Table ID", 27);
                MapeoValorAtributo.SetRange("No.", Auxiliar);

                if MapeoValorAtributo.FindSet() then begin
                    repeat

                        ValorAtributoProducto.Reset();
                        ValorAtributoProducto.SetRange("Attribute ID", MapeoValorAtributo."Item Attribute ID");
                        ValorAtributoProducto.SetRange(ID, MapeoValorAtributo."Item Attribute Value ID");
                        if ValorAtributoProducto.FindFirst() then begin
                            //valores  id 

                            //ancho 
                            if ValorAtributoProducto."Attribute ID" = 16 then begin
                                Ancho := ValorAtributoProducto.Value;
                            end;

                            //largo
                            if ValorAtributoProducto."Attribute ID" = 15 then begin
                                Largo := ValorAtributoProducto.Value;
                            end;

                            //Alto Asiento
                            if ValorAtributoProducto."Attribute ID" = 14 then begin
                                AltoAsiento := ValorAtributoProducto.Value;
                            end;
                            //alto
                            if ValorAtributoProducto."Attribute ID" = 13 then begin
                                Alto := ValorAtributoProducto.Value;
                            end;

                            // Adicion Dimension PBA Dimension
                            if ValorAtributoProducto."Attribute ID" = 17 then begin
                                PBADimension := ValorAtributoProducto.Value;
                            end;


                        end;

                    until MapeoValorAtributo.Next() = 0;

                    medidas := 'Al ' + Alto + ' x' + ' An ' + Ancho + ' x ' + ' La ' + Largo + ' x ' + ' Di ' + PBADimension;
                    /* Inicia Proceso de Rodrigo en Matriz
                    if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                         medidas := 'LA' + Largo + ' x ' + 'AN' + Ancho + ' x ' + 'AL' + Alto + ' x ' + 'ALA' + AltoAsiento;
                     end;

                     if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                         medidas := 'LA' + Largo + ' x ' + 'AN' + Ancho + ' x ' +  + AltoAsiento;
                     end;

                     if ((Largo <> '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                         medidas := Largo + ' x ' + Ancho;
                     end;

                     if ((Largo <> '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                         medidas := Largo + ' x ' + Alto + ' x ' + AltoAsiento;
                     end;
                     if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                         medidas := Largo + ' x ' + AltoAsiento;
                     end;
                     if ((Largo <> '') and (Ancho = '')) and (Alto = '') and (AltoAsiento = '') then begin
                         medidas := Largo;
                     end;
                     if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                         medidas := Ancho + ' x ' + Alto + ' x ' + AltoAsiento;
                     end;
                     if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento <> '') then begin
                         medidas := Ancho + ' x ' + AltoAsiento;
                     end;
                     if ((Largo = '') and (Ancho <> '')) and (Alto = '') and (AltoAsiento = '') then begin
                         medidas := Ancho;
                     end;
                     if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento <> '') then begin
                         medidas := Alto + ' x ' + AltoAsiento;
                     end;
                     if ((Largo = '') and (Ancho = '')) and (Alto <> '') and (AltoAsiento = '') then begin
                         medidas := Alto;
                     end;
                     if ((Largo = '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                         medidas := Ancho + ' x ' + Alto;
                     end;
                     if ((Largo <> '') and (Ancho <> '')) and (Alto <> '') and (AltoAsiento = '') then begin
                         medidas := Largo + ' x ' + Ancho + ' x ' + Alto;
                     end;
                     if ((Largo = '') and (Ancho = '')) and (Alto = '') and (AltoAsiento <> '') then begin
                         medidas := AltoAsiento;
                     end;
                     */

                end;






            end;

        }

    }
    requestpage
    {

        layout
        {
            area(Content)
            {
                group("Opciones de Generacion Etiqueta Namuh")
                {
                    field("Cantidad de Etiquetas"; PBANumeroEtiquetas)
                    {
                        ApplicationArea = All;
                    }
                    field("Mostrar Precio del Producto"; PBAMostrarPrecio)
                    {
                        ApplicationArea = All;
                    }

                    field("Precio en USD"; PBAMostrarPrecioUSD)
                    {
                        ApplicationArea = All;
                    }

                }


            }



        }
        trigger OnOpenPage()
        var
            myInt: Integer;
        begin
            PBANumeroEtiquetas := 1;

            PBAMostrarPrecio := true;

            PBAMostrarPrecioUSD := false;

        end;

    }



    var
        PBATablePrice: Record "Sales Price";
        PBAPrecio: Decimal;
        PBACodDivisa: Text;
        StartingDate: Date;
        Barcode: Codeunit Barcode2;
        temp: Record TempBlobExten temporary;

        ///////////////////////////////////////////////////////////////

        PBANumeroEtiquetas: Integer;
        PBAMostrarPrecio: Boolean;
        PBAMostrarPrecioUSD: Boolean;

        PBANO: Code[50];

        PBADescripcion: Text[100];

        PBAUnidadMedida: Code[10];

        PBATablaGrupoClientes: Record "Customer Price Group";

        PBACodeGrupoCliente: Code[25];

        ///////////////////
        Ancho: Text[250];
        Largo: Text[250];
        Alto: Text[250];
        AltoAsiento: Text[250];
        PBADimension: Text;
        medidas: Text[750];


}








report 50118 "Ticket Venta Samata Dee"
{
    UsageCategory = Administration;
    ApplicationArea = All;
    DefaultLayout = RDLC;
    RDLCLayout = 'Ticket Venta Munah.rdl';

    dataset
    {

        dataitem("Sales Invoice Header"; "Sales Invoice Header")
        {
            column(Salesperson_Code; PBACodComprador) { }
            column(Amount; Amount) { }
            column(Amount_Including_VAT_CantidadIVA; "Amount Including VAT") { }
            column(PBAIVA; PBAIVA) { }
            column(PBAFechayHoraImpresion; PBAHoraImpresion) { }
            column(PBAAddress1; PBAAddress1) { }
            column(PBAAddress2; PBAAddress2) { }
            column(PBACity; PBACity) { }
            column(PBAProvince; PBAProvince) { }
            column(PBAZIPCode; PBAZIPCode) { }
            column(PBANoFactura; PBANoFactura) { }
            column(PBAFecha; PBAFecha) { }
            column(PBAHora; PBAHora) { }

            dataitem("Sales Invoice Line"; "Sales Invoice Line")
            {
                DataItemLink = "Document No." = FIELD("No.");

                column(No_; "No.") { }

                column(Description; Description) { }

                column(Quantity; Quantity) { }

                column(Unit_of_Measure_Code; "Unit of Measure Code") { }

                column(Line_Amount; "Line Amount") { }

                column(Unit_Price; "Unit Price") { }


                dataitem("Company Information"; "Company Information")
                {
                    column(Name; Name) { }
                    column(Picture; Picture) { }
                    column(RFC_No_; "RFC No.") { }

                    ////// Disparador Informacion Compañia
                    trigger OnAfterGetRecord()
                    begin
                        "Company Information".Get();
                        "Company Information".CalcFields(Picture);

                    end;
                }
                ////// Disparador Line
                trigger OnAfterGetRecord()


                begin
                    //"Sales Invoice Line".SetRange("Document No.", PBADocumentNo);
                    //PBASubtotalLine := "Sales Invoice Line".


                end;
            }
            ////// Disparador Header

            trigger OnAfterGetRecord()

            begin
                PBACodComprador := "Sales Invoice Header"."Salesperson Code";
                PBADocumentNo := "Sales Invoice Header"."No.";
                CalcFields(Amount);
                CalcFields("Amount Including VAT");
                PBAIVA := ("Amount Including VAT" - Amount);
                PBAHoraImpresion := CurrentDateTime();
                PBANoFactura := "Sales Invoice Header"."No.";
                PBAFecha := Today();
                PBAHora := Format(Time());


                PBALocations.SetRange(Code, "Sales Invoice Header"."Location Code");
                if PBALocations.FindFirst() then begin
                    PBAAddress1 := PBALocations.Address;
                    //PBAAddress2 := PBALocations."Address 2"; trae un numero de telefono
                    PBACity := PBALocations.City;
                    PBAProvince := PBALocations.County;
                    PBAZIPCode := PBALocations."Post Code";
                    PBAAddress2 := PBACompanyInfo."Address 2";
                end;



            end;

        }

    }


    var

    var
        PBACompanyInfo: Record "Company Information";
        PBAHeder: Record "Sales Invoice Header";
        PBADocumentNo: Code[20];
        PBACodComprador: Code[20];

        PBASubtotalLine: Decimal;
        PBAIVA: Decimal;
        PBAHoraImpresion: DateTime;

        PBALocations: Record Location;
        PBAAddress1: Code[100];
        PBAAddress2: Code[100];
        PBACity: Code[50];
        PBAProvince: Code[50];
        PBAZIPCode: Code[50];
        PBANoFactura: Code[25];
        PBAFecha: Date;
        PBAHora: Text;
}
report 50119 "Transfer OrderExten"
{
    //version business central 15

    DefaultLayout = RDLC;
    RDLCLayout = './Transfer Order.rdl';
    Caption = 'Transfer Order';

    dataset
    {
        dataitem("Transfer Header"; "Transfer Header")
        {
            DataItemTableView = SORTING("No.");
            RequestFilterFields = "No.", "Transfer-from Code", "Transfer-to Code";
            RequestFilterHeading = 'Transfer Order';
            column(No_TransferHdr; "No.")
            {
            }
            column(Assigned_User_ID; "Assigned User ID")
            {
            }
            column(N__de_Pizarra; "N° de Pizarra")
            {

            }
            column(Descripcionpizarra; Descripcionpizarra)
            {

            }
            column(Comentarios; Comentarios)
            {

            }
            dataitem(CopyLoop; "Integer")
            {
                DataItemTableView = SORTING(Number);
                dataitem(PageLoop; "Integer")
                {
                    DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));
                    column(CopyCaption; StrSubstNo(Text001, CopyText))
                    {
                    }
                    column(TransferToAddr1; TransferToAddr[1])
                    {
                    }
                    column(TransferFromAddr1; TransferFromAddr[1])
                    {
                    }
                    column(TransferToAddr2; TransferToAddr[2])
                    {
                    }
                    column(TransferFromAddr2; TransferFromAddr[2])
                    {
                    }
                    column(TransferToAddr3; TransferToAddr[3])
                    {
                    }
                    column(TransferFromAddr3; TransferFromAddr[3])
                    {
                    }
                    column(TransferToAddr4; TransferToAddr[4])
                    {
                    }
                    column(TransferFromAddr4; TransferFromAddr[4])
                    {
                    }
                    column(TransferToAddr5; TransferToAddr[5])
                    {
                    }
                    column(TransferToAddr6; TransferToAddr[6])
                    {
                    }
                    column(InTransitCode_TransHdr; "Transfer Header"."In-Transit Code")
                    {
                        IncludeCaption = true;
                    }
                    column(PostingDate_TransHdr; Format("Transfer Header"."Posting Date", 0, 4))
                    {
                    }
                    column(TransferToAddr7; TransferToAddr[7])
                    {
                    }
                    column(TransferToAddr8; TransferToAddr[8])
                    {
                    }
                    column(TransferFromAddr5; TransferFromAddr[5])
                    {
                    }
                    column(TransferFromAddr6; TransferFromAddr[6])
                    {
                    }
                    column(PageCaption; StrSubstNo(Text002, ''))
                    {
                    }
                    column(OutputNo; OutputNo)
                    {
                    }
                    column(ShptMethodDesc; ShipmentMethod.Description)
                    {
                    }
                    dataitem(DimensionLoop1; "Integer")
                    {
                        DataItemLinkReference = "Transfer Header";
                        DataItemTableView = SORTING(Number) WHERE(Number = FILTER(1 ..));
                        column(DimText; DimText)
                        {
                        }
                        column(Number_DimensionLoop1; Number)
                        {
                        }
                        column(HdrDimensionsCaption; HdrDimensionsCaptionLbl)
                        {
                        }

                        trigger OnAfterGetRecord()
                        begin
                            if Number = 1 then begin
                                if not DimSetEntry1.FindSet then
                                    CurrReport.Break;
                            end else
                                if not Continue then
                                    CurrReport.Break;

                            Clear(DimText);
                            Continue := false;
                            repeat
                                OldDimText := DimText;
                                if DimText = '' then
                                    DimText := StrSubstNo('%1 - %2', DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code")
                                else
                                    DimText :=
                                      StrSubstNo(
                                        '%1; %2 - %3', DimText,
                                        DimSetEntry1."Dimension Code", DimSetEntry1."Dimension Value Code");
                                if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                    DimText := OldDimText;
                                    Continue := true;
                                    exit;
                                end;
                            until DimSetEntry1.Next = 0;
                        end;

                        trigger OnPreDataItem()
                        begin
                            if not ShowInternalInfo then
                                CurrReport.Break;
                        end;
                    }
                    dataitem("Transfer Line"; "Transfer Line")
                    {
                        DataItemLink = "Document No." = FIELD("No.");
                        DataItemLinkReference = "Transfer Header";
                        DataItemTableView = SORTING("Document No.", "Line No.") WHERE("Derived From Line No." = CONST(0));
                        column(ItemNo_TransLine; "Item No.")
                        {
                            IncludeCaption = true;
                        }
                        column(Desc_TransLine; Description)
                        {
                            IncludeCaption = true;
                        }
                        column(Qty_TransLine; Quantity)
                        {
                            IncludeCaption = true;
                        }
                        column(UOM_TransLine; "Unit of Measure")
                        {
                            IncludeCaption = true;
                        }
                        column(Qty_TransLineShipped; "Quantity Shipped")
                        {
                            IncludeCaption = true;
                        }
                        column(QtyReceived_TransLine; "Quantity Received")
                        {
                            IncludeCaption = true;
                        }
                        column(TransFromBinCode_TransLine; "Transfer-from Bin Code")
                        {
                            IncludeCaption = true;
                        }
                        column(TransToBinCode_TransLine; "Transfer-To Bin Code")
                        {
                            IncludeCaption = true;
                        }
                        column(LineNo_TransLine; "Line No.")
                        {
                        }
                        dataitem(DimensionLoop2; "Integer")
                        {
                            DataItemTableView = SORTING(Number) WHERE(Number = FILTER(1 ..));
                            column(DimText2; DimText)
                            {
                            }
                            column(Number_DimensionLoop2; Number)
                            {
                            }
                            column(LineDimensionsCaption; LineDimensionsCaptionLbl)
                            {
                            }

                            trigger OnAfterGetRecord()
                            begin
                                if Number = 1 then begin
                                    if not DimSetEntry2.FindSet then
                                        CurrReport.Break;
                                end else
                                    if not Continue then
                                        CurrReport.Break;

                                Clear(DimText);
                                Continue := false;
                                repeat
                                    OldDimText := DimText;
                                    if DimText = '' then
                                        DimText := StrSubstNo('%1 - %2', DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code")
                                    else
                                        DimText :=
                                          StrSubstNo(
                                            '%1; %2 - %3', DimText,
                                            DimSetEntry2."Dimension Code", DimSetEntry2."Dimension Value Code");
                                    if StrLen(DimText) > MaxStrLen(OldDimText) then begin
                                        DimText := OldDimText;
                                        Continue := true;
                                        exit;
                                    end;
                                until DimSetEntry2.Next = 0;
                            end;

                            trigger OnPreDataItem()
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                            end;
                        }

                        trigger OnAfterGetRecord()
                        begin
                            DimSetEntry2.SetRange("Dimension Set ID", "Dimension Set ID");
                        end;
                    }
                }

                trigger OnAfterGetRecord()
                begin
                    if Number > 1 then begin
                        CopyText := Text000;
                        OutputNo += 1;
                    end;
                    //CurrReport.PageNo := 1;
                end;

                trigger OnPreDataItem()
                begin
                    NoOfLoops := Abs(NoOfCopies) + 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                    OutputNo := 1;
                end;
            }

            trigger OnAfterGetRecord()
            var
                PizarraTransferencia: Record PizarraTransferencia;
                InventorComentLine: Record "Inventory Comment Line";


            begin
                DimSetEntry1.SetRange("Dimension Set ID", "Dimension Set ID");
                FormatAddr.TransferHeaderTransferFrom(TransferFromAddr, "Transfer Header");
                FormatAddr.TransferHeaderTransferTo(TransferToAddr, "Transfer Header");

                if not ShipmentMethod.Get("Shipment Method Code") then
                    ShipmentMethod.Init;

                PizarraTransferencia.SetRange(CodigoPizarra, "N° de Pizarra");
                if PizarraTransferencia.FindFirst() then begin
                    Descripcionpizarra := PizarraTransferencia."Descripción";
                end;
                InventorComentLine.SetRange("Document Type", InventorComentLine."Document Type"::"Transfer Order");
                InventorComentLine.SetRange("No.", "No.");
                if InventorComentLine.FindFirst() then begin
                    repeat
                        if InventorComentLine."Line No." >= 40000 then begin
                            //contador := true;
                        end else
                            Comentarios := Comentarios + ' ' + InventorComentLine.Comment;
                    until InventorComentLine.Next() = 0;
                end;
            end;
        }
    }

    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Opciones)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopies)
                    {
                        ApplicationArea = Location;
                        Caption = 'No. of Copies';
                        ToolTip = 'Specifies how many copies of the document to print.';
                    }
                    field(ShowInternalInfo; ShowInternalInfo)
                    {
                        ApplicationArea = Location;
                        Caption = 'Show Internal Information';
                        ToolTip = 'Specifies if you want the printed report to show information that is only for internal use.';
                    }
                }
            }
        }

        actions
        {
        }
    }

    labels
    {
        PostingDateCaption = 'Fecha registro';
        ShptMethodDescCaption = 'Método de envío ';
    }

    var
        Descripcionpizarra: Text[100];
        Comentarios: Text;
        Text000: Label 'COPY';
        Text001: Label 'PEDIDO TRANSFERENCIA %1';
        Text002: Label 'Pág %1';
        ShipmentMethod: Record "Shipment Method";
        DimSetEntry1: Record "Dimension Set Entry";
        DimSetEntry2: Record "Dimension Set Entry";
        FormatAddr: Codeunit "Format Address";
        TransferFromAddr: array[8] of Text[50];
        TransferToAddr: array[8] of Text[50];
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        OutputNo: Integer;
        HdrDimensionsCaptionLbl: Label 'Header Dimensions';
        LineDimensionsCaptionLbl: Label 'Line Dimensions';
}
